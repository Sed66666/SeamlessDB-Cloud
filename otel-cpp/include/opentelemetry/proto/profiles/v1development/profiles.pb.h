// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/profiles/v1development/profiles.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "opentelemetry/proto/common/v1/common.pb.h"
#include "opentelemetry/proto/resource/v1/resource.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto;
namespace opentelemetry {
namespace proto {
namespace profiles {
namespace v1development {
class AttributeUnit;
class AttributeUnitDefaultTypeInternal;
extern AttributeUnitDefaultTypeInternal _AttributeUnit_default_instance_;
class Function;
class FunctionDefaultTypeInternal;
extern FunctionDefaultTypeInternal _Function_default_instance_;
class Line;
class LineDefaultTypeInternal;
extern LineDefaultTypeInternal _Line_default_instance_;
class Link;
class LinkDefaultTypeInternal;
extern LinkDefaultTypeInternal _Link_default_instance_;
class Location;
class LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class Mapping;
class MappingDefaultTypeInternal;
extern MappingDefaultTypeInternal _Mapping_default_instance_;
class Profile;
class ProfileDefaultTypeInternal;
extern ProfileDefaultTypeInternal _Profile_default_instance_;
class ProfilesData;
class ProfilesDataDefaultTypeInternal;
extern ProfilesDataDefaultTypeInternal _ProfilesData_default_instance_;
class ResourceProfiles;
class ResourceProfilesDefaultTypeInternal;
extern ResourceProfilesDefaultTypeInternal _ResourceProfiles_default_instance_;
class Sample;
class SampleDefaultTypeInternal;
extern SampleDefaultTypeInternal _Sample_default_instance_;
class ScopeProfiles;
class ScopeProfilesDefaultTypeInternal;
extern ScopeProfilesDefaultTypeInternal _ScopeProfiles_default_instance_;
class ValueType;
class ValueTypeDefaultTypeInternal;
extern ValueTypeDefaultTypeInternal _ValueType_default_instance_;
}  // namespace v1development
}  // namespace profiles
}  // namespace proto
}  // namespace opentelemetry
PROTOBUF_NAMESPACE_OPEN
template<> ::opentelemetry::proto::profiles::v1development::AttributeUnit* Arena::CreateMaybeMessage<::opentelemetry::proto::profiles::v1development::AttributeUnit>(Arena*);
template<> ::opentelemetry::proto::profiles::v1development::Function* Arena::CreateMaybeMessage<::opentelemetry::proto::profiles::v1development::Function>(Arena*);
template<> ::opentelemetry::proto::profiles::v1development::Line* Arena::CreateMaybeMessage<::opentelemetry::proto::profiles::v1development::Line>(Arena*);
template<> ::opentelemetry::proto::profiles::v1development::Link* Arena::CreateMaybeMessage<::opentelemetry::proto::profiles::v1development::Link>(Arena*);
template<> ::opentelemetry::proto::profiles::v1development::Location* Arena::CreateMaybeMessage<::opentelemetry::proto::profiles::v1development::Location>(Arena*);
template<> ::opentelemetry::proto::profiles::v1development::Mapping* Arena::CreateMaybeMessage<::opentelemetry::proto::profiles::v1development::Mapping>(Arena*);
template<> ::opentelemetry::proto::profiles::v1development::Profile* Arena::CreateMaybeMessage<::opentelemetry::proto::profiles::v1development::Profile>(Arena*);
template<> ::opentelemetry::proto::profiles::v1development::ProfilesData* Arena::CreateMaybeMessage<::opentelemetry::proto::profiles::v1development::ProfilesData>(Arena*);
template<> ::opentelemetry::proto::profiles::v1development::ResourceProfiles* Arena::CreateMaybeMessage<::opentelemetry::proto::profiles::v1development::ResourceProfiles>(Arena*);
template<> ::opentelemetry::proto::profiles::v1development::Sample* Arena::CreateMaybeMessage<::opentelemetry::proto::profiles::v1development::Sample>(Arena*);
template<> ::opentelemetry::proto::profiles::v1development::ScopeProfiles* Arena::CreateMaybeMessage<::opentelemetry::proto::profiles::v1development::ScopeProfiles>(Arena*);
template<> ::opentelemetry::proto::profiles::v1development::ValueType* Arena::CreateMaybeMessage<::opentelemetry::proto::profiles::v1development::ValueType>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opentelemetry {
namespace proto {
namespace profiles {
namespace v1development {

enum AggregationTemporality : int {
  AGGREGATION_TEMPORALITY_UNSPECIFIED = 0,
  AGGREGATION_TEMPORALITY_DELTA = 1,
  AGGREGATION_TEMPORALITY_CUMULATIVE = 2,
  AggregationTemporality_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AggregationTemporality_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AggregationTemporality_IsValid(int value);
constexpr AggregationTemporality AggregationTemporality_MIN = AGGREGATION_TEMPORALITY_UNSPECIFIED;
constexpr AggregationTemporality AggregationTemporality_MAX = AGGREGATION_TEMPORALITY_CUMULATIVE;
constexpr int AggregationTemporality_ARRAYSIZE = AggregationTemporality_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AggregationTemporality_descriptor();
template<typename T>
inline const std::string& AggregationTemporality_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AggregationTemporality>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AggregationTemporality_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AggregationTemporality_descriptor(), enum_t_value);
}
inline bool AggregationTemporality_Parse(
    const std::string& name, AggregationTemporality* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AggregationTemporality>(
    AggregationTemporality_descriptor(), name, value);
}
// ===================================================================

class ProfilesData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.profiles.v1development.ProfilesData) */ {
 public:
  inline ProfilesData() : ProfilesData(nullptr) {};
  virtual ~ProfilesData();

  ProfilesData(const ProfilesData& from);
  ProfilesData(ProfilesData&& from) noexcept
    : ProfilesData() {
    *this = ::std::move(from);
  }

  inline ProfilesData& operator=(const ProfilesData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilesData& operator=(ProfilesData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfilesData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfilesData* internal_default_instance() {
    return reinterpret_cast<const ProfilesData*>(
               &_ProfilesData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProfilesData& a, ProfilesData& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilesData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfilesData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfilesData* New() const final {
    return CreateMaybeMessage<ProfilesData>(nullptr);
  }

  ProfilesData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfilesData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfilesData& from);
  void MergeFrom(const ProfilesData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfilesData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.profiles.v1development.ProfilesData";
  }
  protected:
  explicit ProfilesData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceProfilesFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.profiles.v1development.ResourceProfiles resource_profiles = 1;
  int resource_profiles_size() const;
  private:
  int _internal_resource_profiles_size() const;
  public:
  void clear_resource_profiles();
  ::opentelemetry::proto::profiles::v1development::ResourceProfiles* mutable_resource_profiles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::ResourceProfiles >*
      mutable_resource_profiles();
  private:
  const ::opentelemetry::proto::profiles::v1development::ResourceProfiles& _internal_resource_profiles(int index) const;
  ::opentelemetry::proto::profiles::v1development::ResourceProfiles* _internal_add_resource_profiles();
  public:
  const ::opentelemetry::proto::profiles::v1development::ResourceProfiles& resource_profiles(int index) const;
  ::opentelemetry::proto::profiles::v1development::ResourceProfiles* add_resource_profiles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::ResourceProfiles >&
      resource_profiles() const;

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.profiles.v1development.ProfilesData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::ResourceProfiles > resource_profiles_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto;
};
// -------------------------------------------------------------------

class ResourceProfiles PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.profiles.v1development.ResourceProfiles) */ {
 public:
  inline ResourceProfiles() : ResourceProfiles(nullptr) {};
  virtual ~ResourceProfiles();

  ResourceProfiles(const ResourceProfiles& from);
  ResourceProfiles(ResourceProfiles&& from) noexcept
    : ResourceProfiles() {
    *this = ::std::move(from);
  }

  inline ResourceProfiles& operator=(const ResourceProfiles& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceProfiles& operator=(ResourceProfiles&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResourceProfiles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceProfiles* internal_default_instance() {
    return reinterpret_cast<const ResourceProfiles*>(
               &_ResourceProfiles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResourceProfiles& a, ResourceProfiles& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceProfiles* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceProfiles* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourceProfiles* New() const final {
    return CreateMaybeMessage<ResourceProfiles>(nullptr);
  }

  ResourceProfiles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourceProfiles>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResourceProfiles& from);
  void MergeFrom(const ResourceProfiles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceProfiles* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.profiles.v1development.ResourceProfiles";
  }
  protected:
  explicit ResourceProfiles(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScopeProfilesFieldNumber = 2,
    kSchemaUrlFieldNumber = 3,
    kResourceFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.profiles.v1development.ScopeProfiles scope_profiles = 2;
  int scope_profiles_size() const;
  private:
  int _internal_scope_profiles_size() const;
  public:
  void clear_scope_profiles();
  ::opentelemetry::proto::profiles::v1development::ScopeProfiles* mutable_scope_profiles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::ScopeProfiles >*
      mutable_scope_profiles();
  private:
  const ::opentelemetry::proto::profiles::v1development::ScopeProfiles& _internal_scope_profiles(int index) const;
  ::opentelemetry::proto::profiles::v1development::ScopeProfiles* _internal_add_scope_profiles();
  public:
  const ::opentelemetry::proto::profiles::v1development::ScopeProfiles& scope_profiles(int index) const;
  ::opentelemetry::proto::profiles::v1development::ScopeProfiles* add_scope_profiles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::ScopeProfiles >&
      scope_profiles() const;

  // string schema_url = 3;
  void clear_schema_url();
  const std::string& schema_url() const;
  void set_schema_url(const std::string& value);
  void set_schema_url(std::string&& value);
  void set_schema_url(const char* value);
  void set_schema_url(const char* value, size_t size);
  std::string* mutable_schema_url();
  std::string* release_schema_url();
  void set_allocated_schema_url(std::string* schema_url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_schema_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_schema_url(
      std::string* schema_url);
  private:
  const std::string& _internal_schema_url() const;
  void _internal_set_schema_url(const std::string& value);
  std::string* _internal_mutable_schema_url();
  public:

  // .opentelemetry.proto.resource.v1.Resource resource = 1;
  bool has_resource() const;
  private:
  bool _internal_has_resource() const;
  public:
  void clear_resource();
  const ::opentelemetry::proto::resource::v1::Resource& resource() const;
  ::opentelemetry::proto::resource::v1::Resource* release_resource();
  ::opentelemetry::proto::resource::v1::Resource* mutable_resource();
  void set_allocated_resource(::opentelemetry::proto::resource::v1::Resource* resource);
  private:
  const ::opentelemetry::proto::resource::v1::Resource& _internal_resource() const;
  ::opentelemetry::proto::resource::v1::Resource* _internal_mutable_resource();
  public:
  void unsafe_arena_set_allocated_resource(
      ::opentelemetry::proto::resource::v1::Resource* resource);
  ::opentelemetry::proto::resource::v1::Resource* unsafe_arena_release_resource();

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.profiles.v1development.ResourceProfiles)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::ScopeProfiles > scope_profiles_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schema_url_;
  ::opentelemetry::proto::resource::v1::Resource* resource_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto;
};
// -------------------------------------------------------------------

class ScopeProfiles PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.profiles.v1development.ScopeProfiles) */ {
 public:
  inline ScopeProfiles() : ScopeProfiles(nullptr) {};
  virtual ~ScopeProfiles();

  ScopeProfiles(const ScopeProfiles& from);
  ScopeProfiles(ScopeProfiles&& from) noexcept
    : ScopeProfiles() {
    *this = ::std::move(from);
  }

  inline ScopeProfiles& operator=(const ScopeProfiles& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScopeProfiles& operator=(ScopeProfiles&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScopeProfiles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScopeProfiles* internal_default_instance() {
    return reinterpret_cast<const ScopeProfiles*>(
               &_ScopeProfiles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ScopeProfiles& a, ScopeProfiles& b) {
    a.Swap(&b);
  }
  inline void Swap(ScopeProfiles* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScopeProfiles* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScopeProfiles* New() const final {
    return CreateMaybeMessage<ScopeProfiles>(nullptr);
  }

  ScopeProfiles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScopeProfiles>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScopeProfiles& from);
  void MergeFrom(const ScopeProfiles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScopeProfiles* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.profiles.v1development.ScopeProfiles";
  }
  protected:
  explicit ScopeProfiles(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProfilesFieldNumber = 2,
    kSchemaUrlFieldNumber = 3,
    kScopeFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.profiles.v1development.Profile profiles = 2;
  int profiles_size() const;
  private:
  int _internal_profiles_size() const;
  public:
  void clear_profiles();
  ::opentelemetry::proto::profiles::v1development::Profile* mutable_profiles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Profile >*
      mutable_profiles();
  private:
  const ::opentelemetry::proto::profiles::v1development::Profile& _internal_profiles(int index) const;
  ::opentelemetry::proto::profiles::v1development::Profile* _internal_add_profiles();
  public:
  const ::opentelemetry::proto::profiles::v1development::Profile& profiles(int index) const;
  ::opentelemetry::proto::profiles::v1development::Profile* add_profiles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Profile >&
      profiles() const;

  // string schema_url = 3;
  void clear_schema_url();
  const std::string& schema_url() const;
  void set_schema_url(const std::string& value);
  void set_schema_url(std::string&& value);
  void set_schema_url(const char* value);
  void set_schema_url(const char* value, size_t size);
  std::string* mutable_schema_url();
  std::string* release_schema_url();
  void set_allocated_schema_url(std::string* schema_url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_schema_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_schema_url(
      std::string* schema_url);
  private:
  const std::string& _internal_schema_url() const;
  void _internal_set_schema_url(const std::string& value);
  std::string* _internal_mutable_schema_url();
  public:

  // .opentelemetry.proto.common.v1.InstrumentationScope scope = 1;
  bool has_scope() const;
  private:
  bool _internal_has_scope() const;
  public:
  void clear_scope();
  const ::opentelemetry::proto::common::v1::InstrumentationScope& scope() const;
  ::opentelemetry::proto::common::v1::InstrumentationScope* release_scope();
  ::opentelemetry::proto::common::v1::InstrumentationScope* mutable_scope();
  void set_allocated_scope(::opentelemetry::proto::common::v1::InstrumentationScope* scope);
  private:
  const ::opentelemetry::proto::common::v1::InstrumentationScope& _internal_scope() const;
  ::opentelemetry::proto::common::v1::InstrumentationScope* _internal_mutable_scope();
  public:
  void unsafe_arena_set_allocated_scope(
      ::opentelemetry::proto::common::v1::InstrumentationScope* scope);
  ::opentelemetry::proto::common::v1::InstrumentationScope* unsafe_arena_release_scope();

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.profiles.v1development.ScopeProfiles)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Profile > profiles_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schema_url_;
  ::opentelemetry::proto::common::v1::InstrumentationScope* scope_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto;
};
// -------------------------------------------------------------------

class Profile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.profiles.v1development.Profile) */ {
 public:
  inline Profile() : Profile(nullptr) {};
  virtual ~Profile();

  Profile(const Profile& from);
  Profile(Profile&& from) noexcept
    : Profile() {
    *this = ::std::move(from);
  }

  inline Profile& operator=(const Profile& from) {
    CopyFrom(from);
    return *this;
  }
  inline Profile& operator=(Profile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Profile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Profile* internal_default_instance() {
    return reinterpret_cast<const Profile*>(
               &_Profile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Profile& a, Profile& b) {
    a.Swap(&b);
  }
  inline void Swap(Profile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Profile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Profile* New() const final {
    return CreateMaybeMessage<Profile>(nullptr);
  }

  Profile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Profile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Profile& from);
  void MergeFrom(const Profile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Profile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.profiles.v1development.Profile";
  }
  protected:
  explicit Profile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSampleTypeFieldNumber = 1,
    kSampleFieldNumber = 2,
    kMappingTableFieldNumber = 3,
    kLocationTableFieldNumber = 4,
    kLocationIndicesFieldNumber = 5,
    kFunctionTableFieldNumber = 6,
    kAttributeTableFieldNumber = 7,
    kAttributeUnitsFieldNumber = 8,
    kLinkTableFieldNumber = 9,
    kStringTableFieldNumber = 10,
    kCommentStrindicesFieldNumber = 15,
    kAttributeIndicesFieldNumber = 22,
    kProfileIdFieldNumber = 17,
    kOriginalPayloadFormatFieldNumber = 20,
    kOriginalPayloadFieldNumber = 21,
    kPeriodTypeFieldNumber = 13,
    kTimeNanosFieldNumber = 11,
    kDurationNanosFieldNumber = 12,
    kPeriodFieldNumber = 14,
    kDefaultSampleTypeStrindexFieldNumber = 16,
    kDroppedAttributesCountFieldNumber = 19,
  };
  // repeated .opentelemetry.proto.profiles.v1development.ValueType sample_type = 1;
  int sample_type_size() const;
  private:
  int _internal_sample_type_size() const;
  public:
  void clear_sample_type();
  ::opentelemetry::proto::profiles::v1development::ValueType* mutable_sample_type(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::ValueType >*
      mutable_sample_type();
  private:
  const ::opentelemetry::proto::profiles::v1development::ValueType& _internal_sample_type(int index) const;
  ::opentelemetry::proto::profiles::v1development::ValueType* _internal_add_sample_type();
  public:
  const ::opentelemetry::proto::profiles::v1development::ValueType& sample_type(int index) const;
  ::opentelemetry::proto::profiles::v1development::ValueType* add_sample_type();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::ValueType >&
      sample_type() const;

  // repeated .opentelemetry.proto.profiles.v1development.Sample sample = 2;
  int sample_size() const;
  private:
  int _internal_sample_size() const;
  public:
  void clear_sample();
  ::opentelemetry::proto::profiles::v1development::Sample* mutable_sample(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Sample >*
      mutable_sample();
  private:
  const ::opentelemetry::proto::profiles::v1development::Sample& _internal_sample(int index) const;
  ::opentelemetry::proto::profiles::v1development::Sample* _internal_add_sample();
  public:
  const ::opentelemetry::proto::profiles::v1development::Sample& sample(int index) const;
  ::opentelemetry::proto::profiles::v1development::Sample* add_sample();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Sample >&
      sample() const;

  // repeated .opentelemetry.proto.profiles.v1development.Mapping mapping_table = 3;
  int mapping_table_size() const;
  private:
  int _internal_mapping_table_size() const;
  public:
  void clear_mapping_table();
  ::opentelemetry::proto::profiles::v1development::Mapping* mutable_mapping_table(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Mapping >*
      mutable_mapping_table();
  private:
  const ::opentelemetry::proto::profiles::v1development::Mapping& _internal_mapping_table(int index) const;
  ::opentelemetry::proto::profiles::v1development::Mapping* _internal_add_mapping_table();
  public:
  const ::opentelemetry::proto::profiles::v1development::Mapping& mapping_table(int index) const;
  ::opentelemetry::proto::profiles::v1development::Mapping* add_mapping_table();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Mapping >&
      mapping_table() const;

  // repeated .opentelemetry.proto.profiles.v1development.Location location_table = 4;
  int location_table_size() const;
  private:
  int _internal_location_table_size() const;
  public:
  void clear_location_table();
  ::opentelemetry::proto::profiles::v1development::Location* mutable_location_table(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Location >*
      mutable_location_table();
  private:
  const ::opentelemetry::proto::profiles::v1development::Location& _internal_location_table(int index) const;
  ::opentelemetry::proto::profiles::v1development::Location* _internal_add_location_table();
  public:
  const ::opentelemetry::proto::profiles::v1development::Location& location_table(int index) const;
  ::opentelemetry::proto::profiles::v1development::Location* add_location_table();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Location >&
      location_table() const;

  // repeated int32 location_indices = 5;
  int location_indices_size() const;
  private:
  int _internal_location_indices_size() const;
  public:
  void clear_location_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_location_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_location_indices() const;
  void _internal_add_location_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_location_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 location_indices(int index) const;
  void set_location_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_location_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      location_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_location_indices();

  // repeated .opentelemetry.proto.profiles.v1development.Function function_table = 6;
  int function_table_size() const;
  private:
  int _internal_function_table_size() const;
  public:
  void clear_function_table();
  ::opentelemetry::proto::profiles::v1development::Function* mutable_function_table(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Function >*
      mutable_function_table();
  private:
  const ::opentelemetry::proto::profiles::v1development::Function& _internal_function_table(int index) const;
  ::opentelemetry::proto::profiles::v1development::Function* _internal_add_function_table();
  public:
  const ::opentelemetry::proto::profiles::v1development::Function& function_table(int index) const;
  ::opentelemetry::proto::profiles::v1development::Function* add_function_table();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Function >&
      function_table() const;

  // repeated .opentelemetry.proto.common.v1.KeyValue attribute_table = 7;
  int attribute_table_size() const;
  private:
  int _internal_attribute_table_size() const;
  public:
  void clear_attribute_table();
  ::opentelemetry::proto::common::v1::KeyValue* mutable_attribute_table(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >*
      mutable_attribute_table();
  private:
  const ::opentelemetry::proto::common::v1::KeyValue& _internal_attribute_table(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* _internal_add_attribute_table();
  public:
  const ::opentelemetry::proto::common::v1::KeyValue& attribute_table(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* add_attribute_table();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >&
      attribute_table() const;

  // repeated .opentelemetry.proto.profiles.v1development.AttributeUnit attribute_units = 8;
  int attribute_units_size() const;
  private:
  int _internal_attribute_units_size() const;
  public:
  void clear_attribute_units();
  ::opentelemetry::proto::profiles::v1development::AttributeUnit* mutable_attribute_units(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::AttributeUnit >*
      mutable_attribute_units();
  private:
  const ::opentelemetry::proto::profiles::v1development::AttributeUnit& _internal_attribute_units(int index) const;
  ::opentelemetry::proto::profiles::v1development::AttributeUnit* _internal_add_attribute_units();
  public:
  const ::opentelemetry::proto::profiles::v1development::AttributeUnit& attribute_units(int index) const;
  ::opentelemetry::proto::profiles::v1development::AttributeUnit* add_attribute_units();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::AttributeUnit >&
      attribute_units() const;

  // repeated .opentelemetry.proto.profiles.v1development.Link link_table = 9;
  int link_table_size() const;
  private:
  int _internal_link_table_size() const;
  public:
  void clear_link_table();
  ::opentelemetry::proto::profiles::v1development::Link* mutable_link_table(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Link >*
      mutable_link_table();
  private:
  const ::opentelemetry::proto::profiles::v1development::Link& _internal_link_table(int index) const;
  ::opentelemetry::proto::profiles::v1development::Link* _internal_add_link_table();
  public:
  const ::opentelemetry::proto::profiles::v1development::Link& link_table(int index) const;
  ::opentelemetry::proto::profiles::v1development::Link* add_link_table();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Link >&
      link_table() const;

  // repeated string string_table = 10;
  int string_table_size() const;
  private:
  int _internal_string_table_size() const;
  public:
  void clear_string_table();
  const std::string& string_table(int index) const;
  std::string* mutable_string_table(int index);
  void set_string_table(int index, const std::string& value);
  void set_string_table(int index, std::string&& value);
  void set_string_table(int index, const char* value);
  void set_string_table(int index, const char* value, size_t size);
  std::string* add_string_table();
  void add_string_table(const std::string& value);
  void add_string_table(std::string&& value);
  void add_string_table(const char* value);
  void add_string_table(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& string_table() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_string_table();
  private:
  const std::string& _internal_string_table(int index) const;
  std::string* _internal_add_string_table();
  public:

  // repeated int32 comment_strindices = 15;
  int comment_strindices_size() const;
  private:
  int _internal_comment_strindices_size() const;
  public:
  void clear_comment_strindices();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_comment_strindices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_comment_strindices() const;
  void _internal_add_comment_strindices(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_comment_strindices();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 comment_strindices(int index) const;
  void set_comment_strindices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_comment_strindices(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      comment_strindices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_comment_strindices();

  // repeated int32 attribute_indices = 22;
  int attribute_indices_size() const;
  private:
  int _internal_attribute_indices_size() const;
  public:
  void clear_attribute_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attribute_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_attribute_indices() const;
  void _internal_add_attribute_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_attribute_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 attribute_indices(int index) const;
  void set_attribute_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_attribute_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      attribute_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_attribute_indices();

  // bytes profile_id = 17;
  void clear_profile_id();
  const std::string& profile_id() const;
  void set_profile_id(const std::string& value);
  void set_profile_id(std::string&& value);
  void set_profile_id(const char* value);
  void set_profile_id(const void* value, size_t size);
  std::string* mutable_profile_id();
  std::string* release_profile_id();
  void set_allocated_profile_id(std::string* profile_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_profile_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_profile_id(
      std::string* profile_id);
  private:
  const std::string& _internal_profile_id() const;
  void _internal_set_profile_id(const std::string& value);
  std::string* _internal_mutable_profile_id();
  public:

  // string original_payload_format = 20;
  void clear_original_payload_format();
  const std::string& original_payload_format() const;
  void set_original_payload_format(const std::string& value);
  void set_original_payload_format(std::string&& value);
  void set_original_payload_format(const char* value);
  void set_original_payload_format(const char* value, size_t size);
  std::string* mutable_original_payload_format();
  std::string* release_original_payload_format();
  void set_allocated_original_payload_format(std::string* original_payload_format);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_original_payload_format();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_original_payload_format(
      std::string* original_payload_format);
  private:
  const std::string& _internal_original_payload_format() const;
  void _internal_set_original_payload_format(const std::string& value);
  std::string* _internal_mutable_original_payload_format();
  public:

  // bytes original_payload = 21;
  void clear_original_payload();
  const std::string& original_payload() const;
  void set_original_payload(const std::string& value);
  void set_original_payload(std::string&& value);
  void set_original_payload(const char* value);
  void set_original_payload(const void* value, size_t size);
  std::string* mutable_original_payload();
  std::string* release_original_payload();
  void set_allocated_original_payload(std::string* original_payload);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_original_payload();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_original_payload(
      std::string* original_payload);
  private:
  const std::string& _internal_original_payload() const;
  void _internal_set_original_payload(const std::string& value);
  std::string* _internal_mutable_original_payload();
  public:

  // .opentelemetry.proto.profiles.v1development.ValueType period_type = 13;
  bool has_period_type() const;
  private:
  bool _internal_has_period_type() const;
  public:
  void clear_period_type();
  const ::opentelemetry::proto::profiles::v1development::ValueType& period_type() const;
  ::opentelemetry::proto::profiles::v1development::ValueType* release_period_type();
  ::opentelemetry::proto::profiles::v1development::ValueType* mutable_period_type();
  void set_allocated_period_type(::opentelemetry::proto::profiles::v1development::ValueType* period_type);
  private:
  const ::opentelemetry::proto::profiles::v1development::ValueType& _internal_period_type() const;
  ::opentelemetry::proto::profiles::v1development::ValueType* _internal_mutable_period_type();
  public:
  void unsafe_arena_set_allocated_period_type(
      ::opentelemetry::proto::profiles::v1development::ValueType* period_type);
  ::opentelemetry::proto::profiles::v1development::ValueType* unsafe_arena_release_period_type();

  // int64 time_nanos = 11;
  void clear_time_nanos();
  ::PROTOBUF_NAMESPACE_ID::int64 time_nanos() const;
  void set_time_nanos(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_nanos() const;
  void _internal_set_time_nanos(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 duration_nanos = 12;
  void clear_duration_nanos();
  ::PROTOBUF_NAMESPACE_ID::int64 duration_nanos() const;
  void set_duration_nanos(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_duration_nanos() const;
  void _internal_set_duration_nanos(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 period = 14;
  void clear_period();
  ::PROTOBUF_NAMESPACE_ID::int64 period() const;
  void set_period(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_period() const;
  void _internal_set_period(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 default_sample_type_strindex = 16;
  void clear_default_sample_type_strindex();
  ::PROTOBUF_NAMESPACE_ID::int32 default_sample_type_strindex() const;
  void set_default_sample_type_strindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_default_sample_type_strindex() const;
  void _internal_set_default_sample_type_strindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 dropped_attributes_count = 19;
  void clear_dropped_attributes_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 dropped_attributes_count() const;
  void set_dropped_attributes_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dropped_attributes_count() const;
  void _internal_set_dropped_attributes_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.profiles.v1development.Profile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::ValueType > sample_type_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Sample > sample_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Mapping > mapping_table_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Location > location_table_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > location_indices_;
  mutable std::atomic<int> _location_indices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Function > function_table_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue > attribute_table_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::AttributeUnit > attribute_units_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Link > link_table_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> string_table_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > comment_strindices_;
  mutable std::atomic<int> _comment_strindices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > attribute_indices_;
  mutable std::atomic<int> _attribute_indices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profile_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr original_payload_format_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr original_payload_;
  ::opentelemetry::proto::profiles::v1development::ValueType* period_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_nanos_;
  ::PROTOBUF_NAMESPACE_ID::int64 duration_nanos_;
  ::PROTOBUF_NAMESPACE_ID::int64 period_;
  ::PROTOBUF_NAMESPACE_ID::int32 default_sample_type_strindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dropped_attributes_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto;
};
// -------------------------------------------------------------------

class AttributeUnit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.profiles.v1development.AttributeUnit) */ {
 public:
  inline AttributeUnit() : AttributeUnit(nullptr) {};
  virtual ~AttributeUnit();

  AttributeUnit(const AttributeUnit& from);
  AttributeUnit(AttributeUnit&& from) noexcept
    : AttributeUnit() {
    *this = ::std::move(from);
  }

  inline AttributeUnit& operator=(const AttributeUnit& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributeUnit& operator=(AttributeUnit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AttributeUnit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttributeUnit* internal_default_instance() {
    return reinterpret_cast<const AttributeUnit*>(
               &_AttributeUnit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AttributeUnit& a, AttributeUnit& b) {
    a.Swap(&b);
  }
  inline void Swap(AttributeUnit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributeUnit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AttributeUnit* New() const final {
    return CreateMaybeMessage<AttributeUnit>(nullptr);
  }

  AttributeUnit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AttributeUnit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AttributeUnit& from);
  void MergeFrom(const AttributeUnit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttributeUnit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.profiles.v1development.AttributeUnit";
  }
  protected:
  explicit AttributeUnit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeKeyStrindexFieldNumber = 1,
    kUnitStrindexFieldNumber = 2,
  };
  // int32 attribute_key_strindex = 1;
  void clear_attribute_key_strindex();
  ::PROTOBUF_NAMESPACE_ID::int32 attribute_key_strindex() const;
  void set_attribute_key_strindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attribute_key_strindex() const;
  void _internal_set_attribute_key_strindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 unit_strindex = 2;
  void clear_unit_strindex();
  ::PROTOBUF_NAMESPACE_ID::int32 unit_strindex() const;
  void set_unit_strindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_unit_strindex() const;
  void _internal_set_unit_strindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.profiles.v1development.AttributeUnit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 attribute_key_strindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 unit_strindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto;
};
// -------------------------------------------------------------------

class Link PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.profiles.v1development.Link) */ {
 public:
  inline Link() : Link(nullptr) {};
  virtual ~Link();

  Link(const Link& from);
  Link(Link&& from) noexcept
    : Link() {
    *this = ::std::move(from);
  }

  inline Link& operator=(const Link& from) {
    CopyFrom(from);
    return *this;
  }
  inline Link& operator=(Link&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Link& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Link* internal_default_instance() {
    return reinterpret_cast<const Link*>(
               &_Link_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Link& a, Link& b) {
    a.Swap(&b);
  }
  inline void Swap(Link* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Link* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Link* New() const final {
    return CreateMaybeMessage<Link>(nullptr);
  }

  Link* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Link>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Link& from);
  void MergeFrom(const Link& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Link* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.profiles.v1development.Link";
  }
  protected:
  explicit Link(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTraceIdFieldNumber = 1,
    kSpanIdFieldNumber = 2,
  };
  // bytes trace_id = 1;
  void clear_trace_id();
  const std::string& trace_id() const;
  void set_trace_id(const std::string& value);
  void set_trace_id(std::string&& value);
  void set_trace_id(const char* value);
  void set_trace_id(const void* value, size_t size);
  std::string* mutable_trace_id();
  std::string* release_trace_id();
  void set_allocated_trace_id(std::string* trace_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_trace_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_trace_id(
      std::string* trace_id);
  private:
  const std::string& _internal_trace_id() const;
  void _internal_set_trace_id(const std::string& value);
  std::string* _internal_mutable_trace_id();
  public:

  // bytes span_id = 2;
  void clear_span_id();
  const std::string& span_id() const;
  void set_span_id(const std::string& value);
  void set_span_id(std::string&& value);
  void set_span_id(const char* value);
  void set_span_id(const void* value, size_t size);
  std::string* mutable_span_id();
  std::string* release_span_id();
  void set_allocated_span_id(std::string* span_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_span_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_span_id(
      std::string* span_id);
  private:
  const std::string& _internal_span_id() const;
  void _internal_set_span_id(const std::string& value);
  std::string* _internal_mutable_span_id();
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.profiles.v1development.Link)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr span_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto;
};
// -------------------------------------------------------------------

class ValueType PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.profiles.v1development.ValueType) */ {
 public:
  inline ValueType() : ValueType(nullptr) {};
  virtual ~ValueType();

  ValueType(const ValueType& from);
  ValueType(ValueType&& from) noexcept
    : ValueType() {
    *this = ::std::move(from);
  }

  inline ValueType& operator=(const ValueType& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValueType& operator=(ValueType&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValueType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueType* internal_default_instance() {
    return reinterpret_cast<const ValueType*>(
               &_ValueType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ValueType& a, ValueType& b) {
    a.Swap(&b);
  }
  inline void Swap(ValueType* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValueType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValueType* New() const final {
    return CreateMaybeMessage<ValueType>(nullptr);
  }

  ValueType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValueType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValueType& from);
  void MergeFrom(const ValueType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.profiles.v1development.ValueType";
  }
  protected:
  explicit ValueType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeStrindexFieldNumber = 1,
    kUnitStrindexFieldNumber = 2,
    kAggregationTemporalityFieldNumber = 3,
  };
  // int32 type_strindex = 1;
  void clear_type_strindex();
  ::PROTOBUF_NAMESPACE_ID::int32 type_strindex() const;
  void set_type_strindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type_strindex() const;
  void _internal_set_type_strindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 unit_strindex = 2;
  void clear_unit_strindex();
  ::PROTOBUF_NAMESPACE_ID::int32 unit_strindex() const;
  void set_unit_strindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_unit_strindex() const;
  void _internal_set_unit_strindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .opentelemetry.proto.profiles.v1development.AggregationTemporality aggregation_temporality = 3;
  void clear_aggregation_temporality();
  ::opentelemetry::proto::profiles::v1development::AggregationTemporality aggregation_temporality() const;
  void set_aggregation_temporality(::opentelemetry::proto::profiles::v1development::AggregationTemporality value);
  private:
  ::opentelemetry::proto::profiles::v1development::AggregationTemporality _internal_aggregation_temporality() const;
  void _internal_set_aggregation_temporality(::opentelemetry::proto::profiles::v1development::AggregationTemporality value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.profiles.v1development.ValueType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_strindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 unit_strindex_;
  int aggregation_temporality_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto;
};
// -------------------------------------------------------------------

class Sample PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.profiles.v1development.Sample) */ {
 public:
  inline Sample() : Sample(nullptr) {};
  virtual ~Sample();

  Sample(const Sample& from);
  Sample(Sample&& from) noexcept
    : Sample() {
    *this = ::std::move(from);
  }

  inline Sample& operator=(const Sample& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sample& operator=(Sample&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Sample& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sample* internal_default_instance() {
    return reinterpret_cast<const Sample*>(
               &_Sample_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Sample& a, Sample& b) {
    a.Swap(&b);
  }
  inline void Swap(Sample* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sample* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sample* New() const final {
    return CreateMaybeMessage<Sample>(nullptr);
  }

  Sample* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sample>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Sample& from);
  void MergeFrom(const Sample& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sample* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.profiles.v1development.Sample";
  }
  protected:
  explicit Sample(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 3,
    kAttributeIndicesFieldNumber = 4,
    kTimestampsUnixNanoFieldNumber = 6,
    kLocationsStartIndexFieldNumber = 1,
    kLocationsLengthFieldNumber = 2,
    kLinkIndexFieldNumber = 5,
  };
  // repeated int64 value = 3;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_value() const;
  void _internal_add_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_value();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 value(int index) const;
  void set_value(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_value();

  // repeated int32 attribute_indices = 4;
  int attribute_indices_size() const;
  private:
  int _internal_attribute_indices_size() const;
  public:
  void clear_attribute_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attribute_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_attribute_indices() const;
  void _internal_add_attribute_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_attribute_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 attribute_indices(int index) const;
  void set_attribute_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_attribute_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      attribute_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_attribute_indices();

  // repeated uint64 timestamps_unix_nano = 6;
  int timestamps_unix_nano_size() const;
  private:
  int _internal_timestamps_unix_nano_size() const;
  public:
  void clear_timestamps_unix_nano();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamps_unix_nano(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_timestamps_unix_nano() const;
  void _internal_add_timestamps_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_timestamps_unix_nano();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamps_unix_nano(int index) const;
  void set_timestamps_unix_nano(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_timestamps_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      timestamps_unix_nano() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_timestamps_unix_nano();

  // int32 locations_start_index = 1;
  void clear_locations_start_index();
  ::PROTOBUF_NAMESPACE_ID::int32 locations_start_index() const;
  void set_locations_start_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_locations_start_index() const;
  void _internal_set_locations_start_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 locations_length = 2;
  void clear_locations_length();
  ::PROTOBUF_NAMESPACE_ID::int32 locations_length() const;
  void set_locations_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_locations_length() const;
  void _internal_set_locations_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 link_index = 5;
  bool has_link_index() const;
  private:
  bool _internal_has_link_index() const;
  public:
  void clear_link_index();
  ::PROTOBUF_NAMESPACE_ID::int32 link_index() const;
  void set_link_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_link_index() const;
  void _internal_set_link_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.profiles.v1development.Sample)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > value_;
  mutable std::atomic<int> _value_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > attribute_indices_;
  mutable std::atomic<int> _attribute_indices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > timestamps_unix_nano_;
  mutable std::atomic<int> _timestamps_unix_nano_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 locations_start_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 locations_length_;
  ::PROTOBUF_NAMESPACE_ID::int32 link_index_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto;
};
// -------------------------------------------------------------------

class Mapping PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.profiles.v1development.Mapping) */ {
 public:
  inline Mapping() : Mapping(nullptr) {};
  virtual ~Mapping();

  Mapping(const Mapping& from);
  Mapping(Mapping&& from) noexcept
    : Mapping() {
    *this = ::std::move(from);
  }

  inline Mapping& operator=(const Mapping& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mapping& operator=(Mapping&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mapping& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mapping* internal_default_instance() {
    return reinterpret_cast<const Mapping*>(
               &_Mapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Mapping& a, Mapping& b) {
    a.Swap(&b);
  }
  inline void Swap(Mapping* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mapping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mapping* New() const final {
    return CreateMaybeMessage<Mapping>(nullptr);
  }

  Mapping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mapping>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mapping& from);
  void MergeFrom(const Mapping& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mapping* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.profiles.v1development.Mapping";
  }
  protected:
  explicit Mapping(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeIndicesFieldNumber = 5,
    kMemoryStartFieldNumber = 1,
    kMemoryLimitFieldNumber = 2,
    kFileOffsetFieldNumber = 3,
    kFilenameStrindexFieldNumber = 4,
    kHasFunctionsFieldNumber = 6,
    kHasFilenamesFieldNumber = 7,
    kHasLineNumbersFieldNumber = 8,
    kHasInlineFramesFieldNumber = 9,
  };
  // repeated int32 attribute_indices = 5;
  int attribute_indices_size() const;
  private:
  int _internal_attribute_indices_size() const;
  public:
  void clear_attribute_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attribute_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_attribute_indices() const;
  void _internal_add_attribute_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_attribute_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 attribute_indices(int index) const;
  void set_attribute_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_attribute_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      attribute_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_attribute_indices();

  // uint64 memory_start = 1;
  void clear_memory_start();
  ::PROTOBUF_NAMESPACE_ID::uint64 memory_start() const;
  void set_memory_start(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_memory_start() const;
  void _internal_set_memory_start(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 memory_limit = 2;
  void clear_memory_limit();
  ::PROTOBUF_NAMESPACE_ID::uint64 memory_limit() const;
  void set_memory_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_memory_limit() const;
  void _internal_set_memory_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 file_offset = 3;
  void clear_file_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 file_offset() const;
  void set_file_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_file_offset() const;
  void _internal_set_file_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 filename_strindex = 4;
  void clear_filename_strindex();
  ::PROTOBUF_NAMESPACE_ID::int32 filename_strindex() const;
  void set_filename_strindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_filename_strindex() const;
  void _internal_set_filename_strindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool has_functions = 6;
  void clear_has_functions();
  bool has_functions() const;
  void set_has_functions(bool value);
  private:
  bool _internal_has_functions() const;
  void _internal_set_has_functions(bool value);
  public:

  // bool has_filenames = 7;
  void clear_has_filenames();
  bool has_filenames() const;
  void set_has_filenames(bool value);
  private:
  bool _internal_has_filenames() const;
  void _internal_set_has_filenames(bool value);
  public:

  // bool has_line_numbers = 8;
  void clear_has_line_numbers();
  bool has_line_numbers() const;
  void set_has_line_numbers(bool value);
  private:
  bool _internal_has_line_numbers() const;
  void _internal_set_has_line_numbers(bool value);
  public:

  // bool has_inline_frames = 9;
  void clear_has_inline_frames();
  bool has_inline_frames() const;
  void set_has_inline_frames(bool value);
  private:
  bool _internal_has_inline_frames() const;
  void _internal_set_has_inline_frames(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.profiles.v1development.Mapping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > attribute_indices_;
  mutable std::atomic<int> _attribute_indices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 memory_start_;
  ::PROTOBUF_NAMESPACE_ID::uint64 memory_limit_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_offset_;
  ::PROTOBUF_NAMESPACE_ID::int32 filename_strindex_;
  bool has_functions_;
  bool has_filenames_;
  bool has_line_numbers_;
  bool has_inline_frames_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto;
};
// -------------------------------------------------------------------

class Location PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.profiles.v1development.Location) */ {
 public:
  inline Location() : Location(nullptr) {};
  virtual ~Location();

  Location(const Location& from);
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline Location& operator=(Location&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Location& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }
  inline void Swap(Location* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Location* New() const final {
    return CreateMaybeMessage<Location>(nullptr);
  }

  Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Location>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Location* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.profiles.v1development.Location";
  }
  protected:
  explicit Location(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLineFieldNumber = 3,
    kAttributeIndicesFieldNumber = 5,
    kAddressFieldNumber = 2,
    kMappingIndexFieldNumber = 1,
    kIsFoldedFieldNumber = 4,
  };
  // repeated .opentelemetry.proto.profiles.v1development.Line line = 3;
  int line_size() const;
  private:
  int _internal_line_size() const;
  public:
  void clear_line();
  ::opentelemetry::proto::profiles::v1development::Line* mutable_line(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Line >*
      mutable_line();
  private:
  const ::opentelemetry::proto::profiles::v1development::Line& _internal_line(int index) const;
  ::opentelemetry::proto::profiles::v1development::Line* _internal_add_line();
  public:
  const ::opentelemetry::proto::profiles::v1development::Line& line(int index) const;
  ::opentelemetry::proto::profiles::v1development::Line* add_line();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Line >&
      line() const;

  // repeated int32 attribute_indices = 5;
  int attribute_indices_size() const;
  private:
  int _internal_attribute_indices_size() const;
  public:
  void clear_attribute_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attribute_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_attribute_indices() const;
  void _internal_add_attribute_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_attribute_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 attribute_indices(int index) const;
  void set_attribute_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_attribute_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      attribute_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_attribute_indices();

  // uint64 address = 2;
  void clear_address();
  ::PROTOBUF_NAMESPACE_ID::uint64 address() const;
  void set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_address() const;
  void _internal_set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 mapping_index = 1;
  bool has_mapping_index() const;
  private:
  bool _internal_has_mapping_index() const;
  public:
  void clear_mapping_index();
  ::PROTOBUF_NAMESPACE_ID::int32 mapping_index() const;
  void set_mapping_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mapping_index() const;
  void _internal_set_mapping_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_folded = 4;
  void clear_is_folded();
  bool is_folded() const;
  void set_is_folded(bool value);
  private:
  bool _internal_is_folded() const;
  void _internal_set_is_folded(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.profiles.v1development.Location)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Line > line_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > attribute_indices_;
  mutable std::atomic<int> _attribute_indices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 address_;
  ::PROTOBUF_NAMESPACE_ID::int32 mapping_index_;
  bool is_folded_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto;
};
// -------------------------------------------------------------------

class Line PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.profiles.v1development.Line) */ {
 public:
  inline Line() : Line(nullptr) {};
  virtual ~Line();

  Line(const Line& from);
  Line(Line&& from) noexcept
    : Line() {
    *this = ::std::move(from);
  }

  inline Line& operator=(const Line& from) {
    CopyFrom(from);
    return *this;
  }
  inline Line& operator=(Line&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Line& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Line* internal_default_instance() {
    return reinterpret_cast<const Line*>(
               &_Line_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Line& a, Line& b) {
    a.Swap(&b);
  }
  inline void Swap(Line* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Line* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Line* New() const final {
    return CreateMaybeMessage<Line>(nullptr);
  }

  Line* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Line>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Line& from);
  void MergeFrom(const Line& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Line* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.profiles.v1development.Line";
  }
  protected:
  explicit Line(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLineFieldNumber = 2,
    kColumnFieldNumber = 3,
    kFunctionIndexFieldNumber = 1,
  };
  // int64 line = 2;
  void clear_line();
  ::PROTOBUF_NAMESPACE_ID::int64 line() const;
  void set_line(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_line() const;
  void _internal_set_line(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 column = 3;
  void clear_column();
  ::PROTOBUF_NAMESPACE_ID::int64 column() const;
  void set_column(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_column() const;
  void _internal_set_column(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 function_index = 1;
  void clear_function_index();
  ::PROTOBUF_NAMESPACE_ID::int32 function_index() const;
  void set_function_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_function_index() const;
  void _internal_set_function_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.profiles.v1development.Line)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 line_;
  ::PROTOBUF_NAMESPACE_ID::int64 column_;
  ::PROTOBUF_NAMESPACE_ID::int32 function_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto;
};
// -------------------------------------------------------------------

class Function PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.profiles.v1development.Function) */ {
 public:
  inline Function() : Function(nullptr) {};
  virtual ~Function();

  Function(const Function& from);
  Function(Function&& from) noexcept
    : Function() {
    *this = ::std::move(from);
  }

  inline Function& operator=(const Function& from) {
    CopyFrom(from);
    return *this;
  }
  inline Function& operator=(Function&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Function& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Function* internal_default_instance() {
    return reinterpret_cast<const Function*>(
               &_Function_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Function& a, Function& b) {
    a.Swap(&b);
  }
  inline void Swap(Function* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Function* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Function* New() const final {
    return CreateMaybeMessage<Function>(nullptr);
  }

  Function* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Function>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Function& from);
  void MergeFrom(const Function& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Function* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.profiles.v1development.Function";
  }
  protected:
  explicit Function(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameStrindexFieldNumber = 1,
    kSystemNameStrindexFieldNumber = 2,
    kStartLineFieldNumber = 4,
    kFilenameStrindexFieldNumber = 3,
  };
  // int32 name_strindex = 1;
  void clear_name_strindex();
  ::PROTOBUF_NAMESPACE_ID::int32 name_strindex() const;
  void set_name_strindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_name_strindex() const;
  void _internal_set_name_strindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 system_name_strindex = 2;
  void clear_system_name_strindex();
  ::PROTOBUF_NAMESPACE_ID::int32 system_name_strindex() const;
  void set_system_name_strindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_system_name_strindex() const;
  void _internal_set_system_name_strindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 start_line = 4;
  void clear_start_line();
  ::PROTOBUF_NAMESPACE_ID::int64 start_line() const;
  void set_start_line(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_start_line() const;
  void _internal_set_start_line(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 filename_strindex = 3;
  void clear_filename_strindex();
  ::PROTOBUF_NAMESPACE_ID::int32 filename_strindex() const;
  void set_filename_strindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_filename_strindex() const;
  void _internal_set_filename_strindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.profiles.v1development.Function)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 name_strindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 system_name_strindex_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_line_;
  ::PROTOBUF_NAMESPACE_ID::int32 filename_strindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProfilesData

// repeated .opentelemetry.proto.profiles.v1development.ResourceProfiles resource_profiles = 1;
inline int ProfilesData::_internal_resource_profiles_size() const {
  return resource_profiles_.size();
}
inline int ProfilesData::resource_profiles_size() const {
  return _internal_resource_profiles_size();
}
inline void ProfilesData::clear_resource_profiles() {
  resource_profiles_.Clear();
}
inline ::opentelemetry::proto::profiles::v1development::ResourceProfiles* ProfilesData::mutable_resource_profiles(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.ProfilesData.resource_profiles)
  return resource_profiles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::ResourceProfiles >*
ProfilesData::mutable_resource_profiles() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.ProfilesData.resource_profiles)
  return &resource_profiles_;
}
inline const ::opentelemetry::proto::profiles::v1development::ResourceProfiles& ProfilesData::_internal_resource_profiles(int index) const {
  return resource_profiles_.Get(index);
}
inline const ::opentelemetry::proto::profiles::v1development::ResourceProfiles& ProfilesData::resource_profiles(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.ProfilesData.resource_profiles)
  return _internal_resource_profiles(index);
}
inline ::opentelemetry::proto::profiles::v1development::ResourceProfiles* ProfilesData::_internal_add_resource_profiles() {
  return resource_profiles_.Add();
}
inline ::opentelemetry::proto::profiles::v1development::ResourceProfiles* ProfilesData::add_resource_profiles() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.ProfilesData.resource_profiles)
  return _internal_add_resource_profiles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::ResourceProfiles >&
ProfilesData::resource_profiles() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.ProfilesData.resource_profiles)
  return resource_profiles_;
}

// -------------------------------------------------------------------

// ResourceProfiles

// .opentelemetry.proto.resource.v1.Resource resource = 1;
inline bool ResourceProfiles::_internal_has_resource() const {
  return this != internal_default_instance() && resource_ != nullptr;
}
inline bool ResourceProfiles::has_resource() const {
  return _internal_has_resource();
}
inline const ::opentelemetry::proto::resource::v1::Resource& ResourceProfiles::_internal_resource() const {
  const ::opentelemetry::proto::resource::v1::Resource* p = resource_;
  return p != nullptr ? *p : *reinterpret_cast<const ::opentelemetry::proto::resource::v1::Resource*>(
      &::opentelemetry::proto::resource::v1::_Resource_default_instance_);
}
inline const ::opentelemetry::proto::resource::v1::Resource& ResourceProfiles::resource() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.ResourceProfiles.resource)
  return _internal_resource();
}
inline void ResourceProfiles::unsafe_arena_set_allocated_resource(
    ::opentelemetry::proto::resource::v1::Resource* resource) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource_);
  }
  resource_ = resource;
  if (resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.profiles.v1development.ResourceProfiles.resource)
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceProfiles::release_resource() {
  auto temp = unsafe_arena_release_resource();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceProfiles::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.profiles.v1development.ResourceProfiles.resource)
  
  ::opentelemetry::proto::resource::v1::Resource* temp = resource_;
  resource_ = nullptr;
  return temp;
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceProfiles::_internal_mutable_resource() {
  
  if (resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::opentelemetry::proto::resource::v1::Resource>(GetArena());
    resource_ = p;
  }
  return resource_;
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceProfiles::mutable_resource() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.ResourceProfiles.resource)
  return _internal_mutable_resource();
}
inline void ResourceProfiles::set_allocated_resource(::opentelemetry::proto::resource::v1::Resource* resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource_);
  }
  if (resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource)->GetArena();
    if (message_arena != submessage_arena) {
      resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.profiles.v1development.ResourceProfiles.resource)
}

// repeated .opentelemetry.proto.profiles.v1development.ScopeProfiles scope_profiles = 2;
inline int ResourceProfiles::_internal_scope_profiles_size() const {
  return scope_profiles_.size();
}
inline int ResourceProfiles::scope_profiles_size() const {
  return _internal_scope_profiles_size();
}
inline void ResourceProfiles::clear_scope_profiles() {
  scope_profiles_.Clear();
}
inline ::opentelemetry::proto::profiles::v1development::ScopeProfiles* ResourceProfiles::mutable_scope_profiles(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.ResourceProfiles.scope_profiles)
  return scope_profiles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::ScopeProfiles >*
ResourceProfiles::mutable_scope_profiles() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.ResourceProfiles.scope_profiles)
  return &scope_profiles_;
}
inline const ::opentelemetry::proto::profiles::v1development::ScopeProfiles& ResourceProfiles::_internal_scope_profiles(int index) const {
  return scope_profiles_.Get(index);
}
inline const ::opentelemetry::proto::profiles::v1development::ScopeProfiles& ResourceProfiles::scope_profiles(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.ResourceProfiles.scope_profiles)
  return _internal_scope_profiles(index);
}
inline ::opentelemetry::proto::profiles::v1development::ScopeProfiles* ResourceProfiles::_internal_add_scope_profiles() {
  return scope_profiles_.Add();
}
inline ::opentelemetry::proto::profiles::v1development::ScopeProfiles* ResourceProfiles::add_scope_profiles() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.ResourceProfiles.scope_profiles)
  return _internal_add_scope_profiles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::ScopeProfiles >&
ResourceProfiles::scope_profiles() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.ResourceProfiles.scope_profiles)
  return scope_profiles_;
}

// string schema_url = 3;
inline void ResourceProfiles::clear_schema_url() {
  schema_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResourceProfiles::schema_url() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.ResourceProfiles.schema_url)
  return _internal_schema_url();
}
inline void ResourceProfiles::set_schema_url(const std::string& value) {
  _internal_set_schema_url(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.ResourceProfiles.schema_url)
}
inline std::string* ResourceProfiles::mutable_schema_url() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.ResourceProfiles.schema_url)
  return _internal_mutable_schema_url();
}
inline const std::string& ResourceProfiles::_internal_schema_url() const {
  return schema_url_.Get();
}
inline void ResourceProfiles::_internal_set_schema_url(const std::string& value) {
  
  schema_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResourceProfiles::set_schema_url(std::string&& value) {
  
  schema_url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:opentelemetry.proto.profiles.v1development.ResourceProfiles.schema_url)
}
inline void ResourceProfiles::set_schema_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  schema_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:opentelemetry.proto.profiles.v1development.ResourceProfiles.schema_url)
}
inline void ResourceProfiles::set_schema_url(const char* value,
    size_t size) {
  
  schema_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:opentelemetry.proto.profiles.v1development.ResourceProfiles.schema_url)
}
inline std::string* ResourceProfiles::_internal_mutable_schema_url() {
  
  return schema_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResourceProfiles::release_schema_url() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.profiles.v1development.ResourceProfiles.schema_url)
  return schema_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResourceProfiles::set_allocated_schema_url(std::string* schema_url) {
  if (schema_url != nullptr) {
    
  } else {
    
  }
  schema_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), schema_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.profiles.v1development.ResourceProfiles.schema_url)
}
inline std::string* ResourceProfiles::unsafe_arena_release_schema_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opentelemetry.proto.profiles.v1development.ResourceProfiles.schema_url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return schema_url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResourceProfiles::unsafe_arena_set_allocated_schema_url(
    std::string* schema_url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (schema_url != nullptr) {
    
  } else {
    
  }
  schema_url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      schema_url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.profiles.v1development.ResourceProfiles.schema_url)
}

// -------------------------------------------------------------------

// ScopeProfiles

// .opentelemetry.proto.common.v1.InstrumentationScope scope = 1;
inline bool ScopeProfiles::_internal_has_scope() const {
  return this != internal_default_instance() && scope_ != nullptr;
}
inline bool ScopeProfiles::has_scope() const {
  return _internal_has_scope();
}
inline const ::opentelemetry::proto::common::v1::InstrumentationScope& ScopeProfiles::_internal_scope() const {
  const ::opentelemetry::proto::common::v1::InstrumentationScope* p = scope_;
  return p != nullptr ? *p : *reinterpret_cast<const ::opentelemetry::proto::common::v1::InstrumentationScope*>(
      &::opentelemetry::proto::common::v1::_InstrumentationScope_default_instance_);
}
inline const ::opentelemetry::proto::common::v1::InstrumentationScope& ScopeProfiles::scope() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.ScopeProfiles.scope)
  return _internal_scope();
}
inline void ScopeProfiles::unsafe_arena_set_allocated_scope(
    ::opentelemetry::proto::common::v1::InstrumentationScope* scope) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scope_);
  }
  scope_ = scope;
  if (scope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.profiles.v1development.ScopeProfiles.scope)
}
inline ::opentelemetry::proto::common::v1::InstrumentationScope* ScopeProfiles::release_scope() {
  auto temp = unsafe_arena_release_scope();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::opentelemetry::proto::common::v1::InstrumentationScope* ScopeProfiles::unsafe_arena_release_scope() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.profiles.v1development.ScopeProfiles.scope)
  
  ::opentelemetry::proto::common::v1::InstrumentationScope* temp = scope_;
  scope_ = nullptr;
  return temp;
}
inline ::opentelemetry::proto::common::v1::InstrumentationScope* ScopeProfiles::_internal_mutable_scope() {
  
  if (scope_ == nullptr) {
    auto* p = CreateMaybeMessage<::opentelemetry::proto::common::v1::InstrumentationScope>(GetArena());
    scope_ = p;
  }
  return scope_;
}
inline ::opentelemetry::proto::common::v1::InstrumentationScope* ScopeProfiles::mutable_scope() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.ScopeProfiles.scope)
  return _internal_mutable_scope();
}
inline void ScopeProfiles::set_allocated_scope(::opentelemetry::proto::common::v1::InstrumentationScope* scope) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scope_);
  }
  if (scope) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scope)->GetArena();
    if (message_arena != submessage_arena) {
      scope = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scope, submessage_arena);
    }
    
  } else {
    
  }
  scope_ = scope;
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.profiles.v1development.ScopeProfiles.scope)
}

// repeated .opentelemetry.proto.profiles.v1development.Profile profiles = 2;
inline int ScopeProfiles::_internal_profiles_size() const {
  return profiles_.size();
}
inline int ScopeProfiles::profiles_size() const {
  return _internal_profiles_size();
}
inline void ScopeProfiles::clear_profiles() {
  profiles_.Clear();
}
inline ::opentelemetry::proto::profiles::v1development::Profile* ScopeProfiles::mutable_profiles(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.ScopeProfiles.profiles)
  return profiles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Profile >*
ScopeProfiles::mutable_profiles() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.ScopeProfiles.profiles)
  return &profiles_;
}
inline const ::opentelemetry::proto::profiles::v1development::Profile& ScopeProfiles::_internal_profiles(int index) const {
  return profiles_.Get(index);
}
inline const ::opentelemetry::proto::profiles::v1development::Profile& ScopeProfiles::profiles(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.ScopeProfiles.profiles)
  return _internal_profiles(index);
}
inline ::opentelemetry::proto::profiles::v1development::Profile* ScopeProfiles::_internal_add_profiles() {
  return profiles_.Add();
}
inline ::opentelemetry::proto::profiles::v1development::Profile* ScopeProfiles::add_profiles() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.ScopeProfiles.profiles)
  return _internal_add_profiles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Profile >&
ScopeProfiles::profiles() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.ScopeProfiles.profiles)
  return profiles_;
}

// string schema_url = 3;
inline void ScopeProfiles::clear_schema_url() {
  schema_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ScopeProfiles::schema_url() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.ScopeProfiles.schema_url)
  return _internal_schema_url();
}
inline void ScopeProfiles::set_schema_url(const std::string& value) {
  _internal_set_schema_url(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.ScopeProfiles.schema_url)
}
inline std::string* ScopeProfiles::mutable_schema_url() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.ScopeProfiles.schema_url)
  return _internal_mutable_schema_url();
}
inline const std::string& ScopeProfiles::_internal_schema_url() const {
  return schema_url_.Get();
}
inline void ScopeProfiles::_internal_set_schema_url(const std::string& value) {
  
  schema_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ScopeProfiles::set_schema_url(std::string&& value) {
  
  schema_url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:opentelemetry.proto.profiles.v1development.ScopeProfiles.schema_url)
}
inline void ScopeProfiles::set_schema_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  schema_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:opentelemetry.proto.profiles.v1development.ScopeProfiles.schema_url)
}
inline void ScopeProfiles::set_schema_url(const char* value,
    size_t size) {
  
  schema_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:opentelemetry.proto.profiles.v1development.ScopeProfiles.schema_url)
}
inline std::string* ScopeProfiles::_internal_mutable_schema_url() {
  
  return schema_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ScopeProfiles::release_schema_url() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.profiles.v1development.ScopeProfiles.schema_url)
  return schema_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScopeProfiles::set_allocated_schema_url(std::string* schema_url) {
  if (schema_url != nullptr) {
    
  } else {
    
  }
  schema_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), schema_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.profiles.v1development.ScopeProfiles.schema_url)
}
inline std::string* ScopeProfiles::unsafe_arena_release_schema_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opentelemetry.proto.profiles.v1development.ScopeProfiles.schema_url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return schema_url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ScopeProfiles::unsafe_arena_set_allocated_schema_url(
    std::string* schema_url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (schema_url != nullptr) {
    
  } else {
    
  }
  schema_url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      schema_url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.profiles.v1development.ScopeProfiles.schema_url)
}

// -------------------------------------------------------------------

// Profile

// repeated .opentelemetry.proto.profiles.v1development.ValueType sample_type = 1;
inline int Profile::_internal_sample_type_size() const {
  return sample_type_.size();
}
inline int Profile::sample_type_size() const {
  return _internal_sample_type_size();
}
inline void Profile::clear_sample_type() {
  sample_type_.Clear();
}
inline ::opentelemetry::proto::profiles::v1development::ValueType* Profile::mutable_sample_type(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.Profile.sample_type)
  return sample_type_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::ValueType >*
Profile::mutable_sample_type() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.Profile.sample_type)
  return &sample_type_;
}
inline const ::opentelemetry::proto::profiles::v1development::ValueType& Profile::_internal_sample_type(int index) const {
  return sample_type_.Get(index);
}
inline const ::opentelemetry::proto::profiles::v1development::ValueType& Profile::sample_type(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.sample_type)
  return _internal_sample_type(index);
}
inline ::opentelemetry::proto::profiles::v1development::ValueType* Profile::_internal_add_sample_type() {
  return sample_type_.Add();
}
inline ::opentelemetry::proto::profiles::v1development::ValueType* Profile::add_sample_type() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.Profile.sample_type)
  return _internal_add_sample_type();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::ValueType >&
Profile::sample_type() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.Profile.sample_type)
  return sample_type_;
}

// repeated .opentelemetry.proto.profiles.v1development.Sample sample = 2;
inline int Profile::_internal_sample_size() const {
  return sample_.size();
}
inline int Profile::sample_size() const {
  return _internal_sample_size();
}
inline void Profile::clear_sample() {
  sample_.Clear();
}
inline ::opentelemetry::proto::profiles::v1development::Sample* Profile::mutable_sample(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.Profile.sample)
  return sample_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Sample >*
Profile::mutable_sample() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.Profile.sample)
  return &sample_;
}
inline const ::opentelemetry::proto::profiles::v1development::Sample& Profile::_internal_sample(int index) const {
  return sample_.Get(index);
}
inline const ::opentelemetry::proto::profiles::v1development::Sample& Profile::sample(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.sample)
  return _internal_sample(index);
}
inline ::opentelemetry::proto::profiles::v1development::Sample* Profile::_internal_add_sample() {
  return sample_.Add();
}
inline ::opentelemetry::proto::profiles::v1development::Sample* Profile::add_sample() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.Profile.sample)
  return _internal_add_sample();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Sample >&
Profile::sample() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.Profile.sample)
  return sample_;
}

// repeated .opentelemetry.proto.profiles.v1development.Mapping mapping_table = 3;
inline int Profile::_internal_mapping_table_size() const {
  return mapping_table_.size();
}
inline int Profile::mapping_table_size() const {
  return _internal_mapping_table_size();
}
inline void Profile::clear_mapping_table() {
  mapping_table_.Clear();
}
inline ::opentelemetry::proto::profiles::v1development::Mapping* Profile::mutable_mapping_table(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.Profile.mapping_table)
  return mapping_table_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Mapping >*
Profile::mutable_mapping_table() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.Profile.mapping_table)
  return &mapping_table_;
}
inline const ::opentelemetry::proto::profiles::v1development::Mapping& Profile::_internal_mapping_table(int index) const {
  return mapping_table_.Get(index);
}
inline const ::opentelemetry::proto::profiles::v1development::Mapping& Profile::mapping_table(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.mapping_table)
  return _internal_mapping_table(index);
}
inline ::opentelemetry::proto::profiles::v1development::Mapping* Profile::_internal_add_mapping_table() {
  return mapping_table_.Add();
}
inline ::opentelemetry::proto::profiles::v1development::Mapping* Profile::add_mapping_table() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.Profile.mapping_table)
  return _internal_add_mapping_table();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Mapping >&
Profile::mapping_table() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.Profile.mapping_table)
  return mapping_table_;
}

// repeated .opentelemetry.proto.profiles.v1development.Location location_table = 4;
inline int Profile::_internal_location_table_size() const {
  return location_table_.size();
}
inline int Profile::location_table_size() const {
  return _internal_location_table_size();
}
inline void Profile::clear_location_table() {
  location_table_.Clear();
}
inline ::opentelemetry::proto::profiles::v1development::Location* Profile::mutable_location_table(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.Profile.location_table)
  return location_table_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Location >*
Profile::mutable_location_table() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.Profile.location_table)
  return &location_table_;
}
inline const ::opentelemetry::proto::profiles::v1development::Location& Profile::_internal_location_table(int index) const {
  return location_table_.Get(index);
}
inline const ::opentelemetry::proto::profiles::v1development::Location& Profile::location_table(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.location_table)
  return _internal_location_table(index);
}
inline ::opentelemetry::proto::profiles::v1development::Location* Profile::_internal_add_location_table() {
  return location_table_.Add();
}
inline ::opentelemetry::proto::profiles::v1development::Location* Profile::add_location_table() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.Profile.location_table)
  return _internal_add_location_table();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Location >&
Profile::location_table() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.Profile.location_table)
  return location_table_;
}

// repeated int32 location_indices = 5;
inline int Profile::_internal_location_indices_size() const {
  return location_indices_.size();
}
inline int Profile::location_indices_size() const {
  return _internal_location_indices_size();
}
inline void Profile::clear_location_indices() {
  location_indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profile::_internal_location_indices(int index) const {
  return location_indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profile::location_indices(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.location_indices)
  return _internal_location_indices(index);
}
inline void Profile::set_location_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  location_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Profile.location_indices)
}
inline void Profile::_internal_add_location_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  location_indices_.Add(value);
}
inline void Profile::add_location_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_location_indices(value);
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.Profile.location_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Profile::_internal_location_indices() const {
  return location_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Profile::location_indices() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.Profile.location_indices)
  return _internal_location_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Profile::_internal_mutable_location_indices() {
  return &location_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Profile::mutable_location_indices() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.Profile.location_indices)
  return _internal_mutable_location_indices();
}

// repeated .opentelemetry.proto.profiles.v1development.Function function_table = 6;
inline int Profile::_internal_function_table_size() const {
  return function_table_.size();
}
inline int Profile::function_table_size() const {
  return _internal_function_table_size();
}
inline void Profile::clear_function_table() {
  function_table_.Clear();
}
inline ::opentelemetry::proto::profiles::v1development::Function* Profile::mutable_function_table(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.Profile.function_table)
  return function_table_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Function >*
Profile::mutable_function_table() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.Profile.function_table)
  return &function_table_;
}
inline const ::opentelemetry::proto::profiles::v1development::Function& Profile::_internal_function_table(int index) const {
  return function_table_.Get(index);
}
inline const ::opentelemetry::proto::profiles::v1development::Function& Profile::function_table(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.function_table)
  return _internal_function_table(index);
}
inline ::opentelemetry::proto::profiles::v1development::Function* Profile::_internal_add_function_table() {
  return function_table_.Add();
}
inline ::opentelemetry::proto::profiles::v1development::Function* Profile::add_function_table() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.Profile.function_table)
  return _internal_add_function_table();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Function >&
Profile::function_table() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.Profile.function_table)
  return function_table_;
}

// repeated .opentelemetry.proto.common.v1.KeyValue attribute_table = 7;
inline int Profile::_internal_attribute_table_size() const {
  return attribute_table_.size();
}
inline int Profile::attribute_table_size() const {
  return _internal_attribute_table_size();
}
inline ::opentelemetry::proto::common::v1::KeyValue* Profile::mutable_attribute_table(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.Profile.attribute_table)
  return attribute_table_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >*
Profile::mutable_attribute_table() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.Profile.attribute_table)
  return &attribute_table_;
}
inline const ::opentelemetry::proto::common::v1::KeyValue& Profile::_internal_attribute_table(int index) const {
  return attribute_table_.Get(index);
}
inline const ::opentelemetry::proto::common::v1::KeyValue& Profile::attribute_table(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.attribute_table)
  return _internal_attribute_table(index);
}
inline ::opentelemetry::proto::common::v1::KeyValue* Profile::_internal_add_attribute_table() {
  return attribute_table_.Add();
}
inline ::opentelemetry::proto::common::v1::KeyValue* Profile::add_attribute_table() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.Profile.attribute_table)
  return _internal_add_attribute_table();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >&
Profile::attribute_table() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.Profile.attribute_table)
  return attribute_table_;
}

// repeated .opentelemetry.proto.profiles.v1development.AttributeUnit attribute_units = 8;
inline int Profile::_internal_attribute_units_size() const {
  return attribute_units_.size();
}
inline int Profile::attribute_units_size() const {
  return _internal_attribute_units_size();
}
inline void Profile::clear_attribute_units() {
  attribute_units_.Clear();
}
inline ::opentelemetry::proto::profiles::v1development::AttributeUnit* Profile::mutable_attribute_units(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.Profile.attribute_units)
  return attribute_units_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::AttributeUnit >*
Profile::mutable_attribute_units() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.Profile.attribute_units)
  return &attribute_units_;
}
inline const ::opentelemetry::proto::profiles::v1development::AttributeUnit& Profile::_internal_attribute_units(int index) const {
  return attribute_units_.Get(index);
}
inline const ::opentelemetry::proto::profiles::v1development::AttributeUnit& Profile::attribute_units(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.attribute_units)
  return _internal_attribute_units(index);
}
inline ::opentelemetry::proto::profiles::v1development::AttributeUnit* Profile::_internal_add_attribute_units() {
  return attribute_units_.Add();
}
inline ::opentelemetry::proto::profiles::v1development::AttributeUnit* Profile::add_attribute_units() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.Profile.attribute_units)
  return _internal_add_attribute_units();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::AttributeUnit >&
Profile::attribute_units() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.Profile.attribute_units)
  return attribute_units_;
}

// repeated .opentelemetry.proto.profiles.v1development.Link link_table = 9;
inline int Profile::_internal_link_table_size() const {
  return link_table_.size();
}
inline int Profile::link_table_size() const {
  return _internal_link_table_size();
}
inline void Profile::clear_link_table() {
  link_table_.Clear();
}
inline ::opentelemetry::proto::profiles::v1development::Link* Profile::mutable_link_table(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.Profile.link_table)
  return link_table_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Link >*
Profile::mutable_link_table() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.Profile.link_table)
  return &link_table_;
}
inline const ::opentelemetry::proto::profiles::v1development::Link& Profile::_internal_link_table(int index) const {
  return link_table_.Get(index);
}
inline const ::opentelemetry::proto::profiles::v1development::Link& Profile::link_table(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.link_table)
  return _internal_link_table(index);
}
inline ::opentelemetry::proto::profiles::v1development::Link* Profile::_internal_add_link_table() {
  return link_table_.Add();
}
inline ::opentelemetry::proto::profiles::v1development::Link* Profile::add_link_table() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.Profile.link_table)
  return _internal_add_link_table();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Link >&
Profile::link_table() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.Profile.link_table)
  return link_table_;
}

// repeated string string_table = 10;
inline int Profile::_internal_string_table_size() const {
  return string_table_.size();
}
inline int Profile::string_table_size() const {
  return _internal_string_table_size();
}
inline void Profile::clear_string_table() {
  string_table_.Clear();
}
inline std::string* Profile::add_string_table() {
  // @@protoc_insertion_point(field_add_mutable:opentelemetry.proto.profiles.v1development.Profile.string_table)
  return _internal_add_string_table();
}
inline const std::string& Profile::_internal_string_table(int index) const {
  return string_table_.Get(index);
}
inline const std::string& Profile::string_table(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.string_table)
  return _internal_string_table(index);
}
inline std::string* Profile::mutable_string_table(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.Profile.string_table)
  return string_table_.Mutable(index);
}
inline void Profile::set_string_table(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Profile.string_table)
  string_table_.Mutable(index)->assign(value);
}
inline void Profile::set_string_table(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Profile.string_table)
  string_table_.Mutable(index)->assign(std::move(value));
}
inline void Profile::set_string_table(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_table_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opentelemetry.proto.profiles.v1development.Profile.string_table)
}
inline void Profile::set_string_table(int index, const char* value, size_t size) {
  string_table_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opentelemetry.proto.profiles.v1development.Profile.string_table)
}
inline std::string* Profile::_internal_add_string_table() {
  return string_table_.Add();
}
inline void Profile::add_string_table(const std::string& value) {
  string_table_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.Profile.string_table)
}
inline void Profile::add_string_table(std::string&& value) {
  string_table_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.Profile.string_table)
}
inline void Profile::add_string_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_table_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opentelemetry.proto.profiles.v1development.Profile.string_table)
}
inline void Profile::add_string_table(const char* value, size_t size) {
  string_table_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opentelemetry.proto.profiles.v1development.Profile.string_table)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Profile::string_table() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.Profile.string_table)
  return string_table_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Profile::mutable_string_table() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.Profile.string_table)
  return &string_table_;
}

// int64 time_nanos = 11;
inline void Profile::clear_time_nanos() {
  time_nanos_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Profile::_internal_time_nanos() const {
  return time_nanos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Profile::time_nanos() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.time_nanos)
  return _internal_time_nanos();
}
inline void Profile::_internal_set_time_nanos(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_nanos_ = value;
}
inline void Profile::set_time_nanos(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_nanos(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Profile.time_nanos)
}

// int64 duration_nanos = 12;
inline void Profile::clear_duration_nanos() {
  duration_nanos_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Profile::_internal_duration_nanos() const {
  return duration_nanos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Profile::duration_nanos() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.duration_nanos)
  return _internal_duration_nanos();
}
inline void Profile::_internal_set_duration_nanos(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  duration_nanos_ = value;
}
inline void Profile::set_duration_nanos(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_duration_nanos(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Profile.duration_nanos)
}

// .opentelemetry.proto.profiles.v1development.ValueType period_type = 13;
inline bool Profile::_internal_has_period_type() const {
  return this != internal_default_instance() && period_type_ != nullptr;
}
inline bool Profile::has_period_type() const {
  return _internal_has_period_type();
}
inline void Profile::clear_period_type() {
  if (GetArena() == nullptr && period_type_ != nullptr) {
    delete period_type_;
  }
  period_type_ = nullptr;
}
inline const ::opentelemetry::proto::profiles::v1development::ValueType& Profile::_internal_period_type() const {
  const ::opentelemetry::proto::profiles::v1development::ValueType* p = period_type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::opentelemetry::proto::profiles::v1development::ValueType*>(
      &::opentelemetry::proto::profiles::v1development::_ValueType_default_instance_);
}
inline const ::opentelemetry::proto::profiles::v1development::ValueType& Profile::period_type() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.period_type)
  return _internal_period_type();
}
inline void Profile::unsafe_arena_set_allocated_period_type(
    ::opentelemetry::proto::profiles::v1development::ValueType* period_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(period_type_);
  }
  period_type_ = period_type;
  if (period_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.profiles.v1development.Profile.period_type)
}
inline ::opentelemetry::proto::profiles::v1development::ValueType* Profile::release_period_type() {
  auto temp = unsafe_arena_release_period_type();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::opentelemetry::proto::profiles::v1development::ValueType* Profile::unsafe_arena_release_period_type() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.profiles.v1development.Profile.period_type)
  
  ::opentelemetry::proto::profiles::v1development::ValueType* temp = period_type_;
  period_type_ = nullptr;
  return temp;
}
inline ::opentelemetry::proto::profiles::v1development::ValueType* Profile::_internal_mutable_period_type() {
  
  if (period_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::opentelemetry::proto::profiles::v1development::ValueType>(GetArena());
    period_type_ = p;
  }
  return period_type_;
}
inline ::opentelemetry::proto::profiles::v1development::ValueType* Profile::mutable_period_type() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.Profile.period_type)
  return _internal_mutable_period_type();
}
inline void Profile::set_allocated_period_type(::opentelemetry::proto::profiles::v1development::ValueType* period_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete period_type_;
  }
  if (period_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(period_type);
    if (message_arena != submessage_arena) {
      period_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, period_type, submessage_arena);
    }
    
  } else {
    
  }
  period_type_ = period_type;
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.profiles.v1development.Profile.period_type)
}

// int64 period = 14;
inline void Profile::clear_period() {
  period_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Profile::_internal_period() const {
  return period_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Profile::period() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.period)
  return _internal_period();
}
inline void Profile::_internal_set_period(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  period_ = value;
}
inline void Profile::set_period(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_period(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Profile.period)
}

// repeated int32 comment_strindices = 15;
inline int Profile::_internal_comment_strindices_size() const {
  return comment_strindices_.size();
}
inline int Profile::comment_strindices_size() const {
  return _internal_comment_strindices_size();
}
inline void Profile::clear_comment_strindices() {
  comment_strindices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profile::_internal_comment_strindices(int index) const {
  return comment_strindices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profile::comment_strindices(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.comment_strindices)
  return _internal_comment_strindices(index);
}
inline void Profile::set_comment_strindices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  comment_strindices_.Set(index, value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Profile.comment_strindices)
}
inline void Profile::_internal_add_comment_strindices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  comment_strindices_.Add(value);
}
inline void Profile::add_comment_strindices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_comment_strindices(value);
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.Profile.comment_strindices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Profile::_internal_comment_strindices() const {
  return comment_strindices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Profile::comment_strindices() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.Profile.comment_strindices)
  return _internal_comment_strindices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Profile::_internal_mutable_comment_strindices() {
  return &comment_strindices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Profile::mutable_comment_strindices() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.Profile.comment_strindices)
  return _internal_mutable_comment_strindices();
}

// int32 default_sample_type_strindex = 16;
inline void Profile::clear_default_sample_type_strindex() {
  default_sample_type_strindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profile::_internal_default_sample_type_strindex() const {
  return default_sample_type_strindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profile::default_sample_type_strindex() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.default_sample_type_strindex)
  return _internal_default_sample_type_strindex();
}
inline void Profile::_internal_set_default_sample_type_strindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  default_sample_type_strindex_ = value;
}
inline void Profile::set_default_sample_type_strindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_default_sample_type_strindex(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Profile.default_sample_type_strindex)
}

// bytes profile_id = 17;
inline void Profile::clear_profile_id() {
  profile_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Profile::profile_id() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.profile_id)
  return _internal_profile_id();
}
inline void Profile::set_profile_id(const std::string& value) {
  _internal_set_profile_id(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Profile.profile_id)
}
inline std::string* Profile::mutable_profile_id() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.Profile.profile_id)
  return _internal_mutable_profile_id();
}
inline const std::string& Profile::_internal_profile_id() const {
  return profile_id_.Get();
}
inline void Profile::_internal_set_profile_id(const std::string& value) {
  
  profile_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Profile::set_profile_id(std::string&& value) {
  
  profile_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:opentelemetry.proto.profiles.v1development.Profile.profile_id)
}
inline void Profile::set_profile_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  profile_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:opentelemetry.proto.profiles.v1development.Profile.profile_id)
}
inline void Profile::set_profile_id(const void* value,
    size_t size) {
  
  profile_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:opentelemetry.proto.profiles.v1development.Profile.profile_id)
}
inline std::string* Profile::_internal_mutable_profile_id() {
  
  return profile_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Profile::release_profile_id() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.profiles.v1development.Profile.profile_id)
  return profile_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Profile::set_allocated_profile_id(std::string* profile_id) {
  if (profile_id != nullptr) {
    
  } else {
    
  }
  profile_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), profile_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.profiles.v1development.Profile.profile_id)
}
inline std::string* Profile::unsafe_arena_release_profile_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opentelemetry.proto.profiles.v1development.Profile.profile_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return profile_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Profile::unsafe_arena_set_allocated_profile_id(
    std::string* profile_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (profile_id != nullptr) {
    
  } else {
    
  }
  profile_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      profile_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.profiles.v1development.Profile.profile_id)
}

// uint32 dropped_attributes_count = 19;
inline void Profile::clear_dropped_attributes_count() {
  dropped_attributes_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::_internal_dropped_attributes_count() const {
  return dropped_attributes_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::dropped_attributes_count() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.dropped_attributes_count)
  return _internal_dropped_attributes_count();
}
inline void Profile::_internal_set_dropped_attributes_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dropped_attributes_count_ = value;
}
inline void Profile::set_dropped_attributes_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dropped_attributes_count(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Profile.dropped_attributes_count)
}

// string original_payload_format = 20;
inline void Profile::clear_original_payload_format() {
  original_payload_format_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Profile::original_payload_format() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.original_payload_format)
  return _internal_original_payload_format();
}
inline void Profile::set_original_payload_format(const std::string& value) {
  _internal_set_original_payload_format(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Profile.original_payload_format)
}
inline std::string* Profile::mutable_original_payload_format() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.Profile.original_payload_format)
  return _internal_mutable_original_payload_format();
}
inline const std::string& Profile::_internal_original_payload_format() const {
  return original_payload_format_.Get();
}
inline void Profile::_internal_set_original_payload_format(const std::string& value) {
  
  original_payload_format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Profile::set_original_payload_format(std::string&& value) {
  
  original_payload_format_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:opentelemetry.proto.profiles.v1development.Profile.original_payload_format)
}
inline void Profile::set_original_payload_format(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  original_payload_format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:opentelemetry.proto.profiles.v1development.Profile.original_payload_format)
}
inline void Profile::set_original_payload_format(const char* value,
    size_t size) {
  
  original_payload_format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:opentelemetry.proto.profiles.v1development.Profile.original_payload_format)
}
inline std::string* Profile::_internal_mutable_original_payload_format() {
  
  return original_payload_format_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Profile::release_original_payload_format() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.profiles.v1development.Profile.original_payload_format)
  return original_payload_format_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Profile::set_allocated_original_payload_format(std::string* original_payload_format) {
  if (original_payload_format != nullptr) {
    
  } else {
    
  }
  original_payload_format_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), original_payload_format,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.profiles.v1development.Profile.original_payload_format)
}
inline std::string* Profile::unsafe_arena_release_original_payload_format() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opentelemetry.proto.profiles.v1development.Profile.original_payload_format)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return original_payload_format_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Profile::unsafe_arena_set_allocated_original_payload_format(
    std::string* original_payload_format) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (original_payload_format != nullptr) {
    
  } else {
    
  }
  original_payload_format_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      original_payload_format, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.profiles.v1development.Profile.original_payload_format)
}

// bytes original_payload = 21;
inline void Profile::clear_original_payload() {
  original_payload_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Profile::original_payload() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.original_payload)
  return _internal_original_payload();
}
inline void Profile::set_original_payload(const std::string& value) {
  _internal_set_original_payload(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Profile.original_payload)
}
inline std::string* Profile::mutable_original_payload() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.Profile.original_payload)
  return _internal_mutable_original_payload();
}
inline const std::string& Profile::_internal_original_payload() const {
  return original_payload_.Get();
}
inline void Profile::_internal_set_original_payload(const std::string& value) {
  
  original_payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Profile::set_original_payload(std::string&& value) {
  
  original_payload_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:opentelemetry.proto.profiles.v1development.Profile.original_payload)
}
inline void Profile::set_original_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  original_payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:opentelemetry.proto.profiles.v1development.Profile.original_payload)
}
inline void Profile::set_original_payload(const void* value,
    size_t size) {
  
  original_payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:opentelemetry.proto.profiles.v1development.Profile.original_payload)
}
inline std::string* Profile::_internal_mutable_original_payload() {
  
  return original_payload_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Profile::release_original_payload() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.profiles.v1development.Profile.original_payload)
  return original_payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Profile::set_allocated_original_payload(std::string* original_payload) {
  if (original_payload != nullptr) {
    
  } else {
    
  }
  original_payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), original_payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.profiles.v1development.Profile.original_payload)
}
inline std::string* Profile::unsafe_arena_release_original_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opentelemetry.proto.profiles.v1development.Profile.original_payload)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return original_payload_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Profile::unsafe_arena_set_allocated_original_payload(
    std::string* original_payload) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (original_payload != nullptr) {
    
  } else {
    
  }
  original_payload_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      original_payload, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.profiles.v1development.Profile.original_payload)
}

// repeated int32 attribute_indices = 22;
inline int Profile::_internal_attribute_indices_size() const {
  return attribute_indices_.size();
}
inline int Profile::attribute_indices_size() const {
  return _internal_attribute_indices_size();
}
inline void Profile::clear_attribute_indices() {
  attribute_indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profile::_internal_attribute_indices(int index) const {
  return attribute_indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profile::attribute_indices(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.attribute_indices)
  return _internal_attribute_indices(index);
}
inline void Profile::set_attribute_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  attribute_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Profile.attribute_indices)
}
inline void Profile::_internal_add_attribute_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  attribute_indices_.Add(value);
}
inline void Profile::add_attribute_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_attribute_indices(value);
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.Profile.attribute_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Profile::_internal_attribute_indices() const {
  return attribute_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Profile::attribute_indices() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.Profile.attribute_indices)
  return _internal_attribute_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Profile::_internal_mutable_attribute_indices() {
  return &attribute_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Profile::mutable_attribute_indices() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.Profile.attribute_indices)
  return _internal_mutable_attribute_indices();
}

// -------------------------------------------------------------------

// AttributeUnit

// int32 attribute_key_strindex = 1;
inline void AttributeUnit::clear_attribute_key_strindex() {
  attribute_key_strindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeUnit::_internal_attribute_key_strindex() const {
  return attribute_key_strindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeUnit::attribute_key_strindex() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.AttributeUnit.attribute_key_strindex)
  return _internal_attribute_key_strindex();
}
inline void AttributeUnit::_internal_set_attribute_key_strindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  attribute_key_strindex_ = value;
}
inline void AttributeUnit::set_attribute_key_strindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_attribute_key_strindex(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.AttributeUnit.attribute_key_strindex)
}

// int32 unit_strindex = 2;
inline void AttributeUnit::clear_unit_strindex() {
  unit_strindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeUnit::_internal_unit_strindex() const {
  return unit_strindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeUnit::unit_strindex() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.AttributeUnit.unit_strindex)
  return _internal_unit_strindex();
}
inline void AttributeUnit::_internal_set_unit_strindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  unit_strindex_ = value;
}
inline void AttributeUnit::set_unit_strindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_unit_strindex(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.AttributeUnit.unit_strindex)
}

// -------------------------------------------------------------------

// Link

// bytes trace_id = 1;
inline void Link::clear_trace_id() {
  trace_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Link::trace_id() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Link.trace_id)
  return _internal_trace_id();
}
inline void Link::set_trace_id(const std::string& value) {
  _internal_set_trace_id(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Link.trace_id)
}
inline std::string* Link::mutable_trace_id() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.Link.trace_id)
  return _internal_mutable_trace_id();
}
inline const std::string& Link::_internal_trace_id() const {
  return trace_id_.Get();
}
inline void Link::_internal_set_trace_id(const std::string& value) {
  
  trace_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Link::set_trace_id(std::string&& value) {
  
  trace_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:opentelemetry.proto.profiles.v1development.Link.trace_id)
}
inline void Link::set_trace_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trace_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:opentelemetry.proto.profiles.v1development.Link.trace_id)
}
inline void Link::set_trace_id(const void* value,
    size_t size) {
  
  trace_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:opentelemetry.proto.profiles.v1development.Link.trace_id)
}
inline std::string* Link::_internal_mutable_trace_id() {
  
  return trace_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Link::release_trace_id() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.profiles.v1development.Link.trace_id)
  return trace_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Link::set_allocated_trace_id(std::string* trace_id) {
  if (trace_id != nullptr) {
    
  } else {
    
  }
  trace_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trace_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.profiles.v1development.Link.trace_id)
}
inline std::string* Link::unsafe_arena_release_trace_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opentelemetry.proto.profiles.v1development.Link.trace_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return trace_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Link::unsafe_arena_set_allocated_trace_id(
    std::string* trace_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (trace_id != nullptr) {
    
  } else {
    
  }
  trace_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      trace_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.profiles.v1development.Link.trace_id)
}

// bytes span_id = 2;
inline void Link::clear_span_id() {
  span_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Link::span_id() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Link.span_id)
  return _internal_span_id();
}
inline void Link::set_span_id(const std::string& value) {
  _internal_set_span_id(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Link.span_id)
}
inline std::string* Link::mutable_span_id() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.Link.span_id)
  return _internal_mutable_span_id();
}
inline const std::string& Link::_internal_span_id() const {
  return span_id_.Get();
}
inline void Link::_internal_set_span_id(const std::string& value) {
  
  span_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Link::set_span_id(std::string&& value) {
  
  span_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:opentelemetry.proto.profiles.v1development.Link.span_id)
}
inline void Link::set_span_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  span_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:opentelemetry.proto.profiles.v1development.Link.span_id)
}
inline void Link::set_span_id(const void* value,
    size_t size) {
  
  span_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:opentelemetry.proto.profiles.v1development.Link.span_id)
}
inline std::string* Link::_internal_mutable_span_id() {
  
  return span_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Link::release_span_id() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.profiles.v1development.Link.span_id)
  return span_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Link::set_allocated_span_id(std::string* span_id) {
  if (span_id != nullptr) {
    
  } else {
    
  }
  span_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), span_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.profiles.v1development.Link.span_id)
}
inline std::string* Link::unsafe_arena_release_span_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opentelemetry.proto.profiles.v1development.Link.span_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return span_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Link::unsafe_arena_set_allocated_span_id(
    std::string* span_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (span_id != nullptr) {
    
  } else {
    
  }
  span_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      span_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.profiles.v1development.Link.span_id)
}

// -------------------------------------------------------------------

// ValueType

// int32 type_strindex = 1;
inline void ValueType::clear_type_strindex() {
  type_strindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ValueType::_internal_type_strindex() const {
  return type_strindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ValueType::type_strindex() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.ValueType.type_strindex)
  return _internal_type_strindex();
}
inline void ValueType::_internal_set_type_strindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_strindex_ = value;
}
inline void ValueType::set_type_strindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type_strindex(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.ValueType.type_strindex)
}

// int32 unit_strindex = 2;
inline void ValueType::clear_unit_strindex() {
  unit_strindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ValueType::_internal_unit_strindex() const {
  return unit_strindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ValueType::unit_strindex() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.ValueType.unit_strindex)
  return _internal_unit_strindex();
}
inline void ValueType::_internal_set_unit_strindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  unit_strindex_ = value;
}
inline void ValueType::set_unit_strindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_unit_strindex(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.ValueType.unit_strindex)
}

// .opentelemetry.proto.profiles.v1development.AggregationTemporality aggregation_temporality = 3;
inline void ValueType::clear_aggregation_temporality() {
  aggregation_temporality_ = 0;
}
inline ::opentelemetry::proto::profiles::v1development::AggregationTemporality ValueType::_internal_aggregation_temporality() const {
  return static_cast< ::opentelemetry::proto::profiles::v1development::AggregationTemporality >(aggregation_temporality_);
}
inline ::opentelemetry::proto::profiles::v1development::AggregationTemporality ValueType::aggregation_temporality() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.ValueType.aggregation_temporality)
  return _internal_aggregation_temporality();
}
inline void ValueType::_internal_set_aggregation_temporality(::opentelemetry::proto::profiles::v1development::AggregationTemporality value) {
  
  aggregation_temporality_ = value;
}
inline void ValueType::set_aggregation_temporality(::opentelemetry::proto::profiles::v1development::AggregationTemporality value) {
  _internal_set_aggregation_temporality(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.ValueType.aggregation_temporality)
}

// -------------------------------------------------------------------

// Sample

// int32 locations_start_index = 1;
inline void Sample::clear_locations_start_index() {
  locations_start_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sample::_internal_locations_start_index() const {
  return locations_start_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sample::locations_start_index() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Sample.locations_start_index)
  return _internal_locations_start_index();
}
inline void Sample::_internal_set_locations_start_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  locations_start_index_ = value;
}
inline void Sample::set_locations_start_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_locations_start_index(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Sample.locations_start_index)
}

// int32 locations_length = 2;
inline void Sample::clear_locations_length() {
  locations_length_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sample::_internal_locations_length() const {
  return locations_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sample::locations_length() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Sample.locations_length)
  return _internal_locations_length();
}
inline void Sample::_internal_set_locations_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  locations_length_ = value;
}
inline void Sample::set_locations_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_locations_length(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Sample.locations_length)
}

// repeated int64 value = 3;
inline int Sample::_internal_value_size() const {
  return value_.size();
}
inline int Sample::value_size() const {
  return _internal_value_size();
}
inline void Sample::clear_value() {
  value_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Sample::_internal_value(int index) const {
  return value_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Sample::value(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Sample.value)
  return _internal_value(index);
}
inline void Sample::set_value(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Sample.value)
}
inline void Sample::_internal_add_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  value_.Add(value);
}
inline void Sample::add_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.Sample.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Sample::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Sample::value() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.Sample.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Sample::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Sample::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.Sample.value)
  return _internal_mutable_value();
}

// repeated int32 attribute_indices = 4;
inline int Sample::_internal_attribute_indices_size() const {
  return attribute_indices_.size();
}
inline int Sample::attribute_indices_size() const {
  return _internal_attribute_indices_size();
}
inline void Sample::clear_attribute_indices() {
  attribute_indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sample::_internal_attribute_indices(int index) const {
  return attribute_indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sample::attribute_indices(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Sample.attribute_indices)
  return _internal_attribute_indices(index);
}
inline void Sample::set_attribute_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  attribute_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Sample.attribute_indices)
}
inline void Sample::_internal_add_attribute_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  attribute_indices_.Add(value);
}
inline void Sample::add_attribute_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_attribute_indices(value);
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.Sample.attribute_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Sample::_internal_attribute_indices() const {
  return attribute_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Sample::attribute_indices() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.Sample.attribute_indices)
  return _internal_attribute_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Sample::_internal_mutable_attribute_indices() {
  return &attribute_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Sample::mutable_attribute_indices() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.Sample.attribute_indices)
  return _internal_mutable_attribute_indices();
}

// int32 link_index = 5;
inline bool Sample::_internal_has_link_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Sample::has_link_index() const {
  return _internal_has_link_index();
}
inline void Sample::clear_link_index() {
  link_index_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sample::_internal_link_index() const {
  return link_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sample::link_index() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Sample.link_index)
  return _internal_link_index();
}
inline void Sample::_internal_set_link_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  link_index_ = value;
}
inline void Sample::set_link_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_link_index(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Sample.link_index)
}

// repeated uint64 timestamps_unix_nano = 6;
inline int Sample::_internal_timestamps_unix_nano_size() const {
  return timestamps_unix_nano_.size();
}
inline int Sample::timestamps_unix_nano_size() const {
  return _internal_timestamps_unix_nano_size();
}
inline void Sample::clear_timestamps_unix_nano() {
  timestamps_unix_nano_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Sample::_internal_timestamps_unix_nano(int index) const {
  return timestamps_unix_nano_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Sample::timestamps_unix_nano(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Sample.timestamps_unix_nano)
  return _internal_timestamps_unix_nano(index);
}
inline void Sample::set_timestamps_unix_nano(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  timestamps_unix_nano_.Set(index, value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Sample.timestamps_unix_nano)
}
inline void Sample::_internal_add_timestamps_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  timestamps_unix_nano_.Add(value);
}
inline void Sample::add_timestamps_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_timestamps_unix_nano(value);
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.Sample.timestamps_unix_nano)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Sample::_internal_timestamps_unix_nano() const {
  return timestamps_unix_nano_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Sample::timestamps_unix_nano() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.Sample.timestamps_unix_nano)
  return _internal_timestamps_unix_nano();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Sample::_internal_mutable_timestamps_unix_nano() {
  return &timestamps_unix_nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Sample::mutable_timestamps_unix_nano() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.Sample.timestamps_unix_nano)
  return _internal_mutable_timestamps_unix_nano();
}

// -------------------------------------------------------------------

// Mapping

// uint64 memory_start = 1;
inline void Mapping::clear_memory_start() {
  memory_start_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Mapping::_internal_memory_start() const {
  return memory_start_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Mapping::memory_start() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Mapping.memory_start)
  return _internal_memory_start();
}
inline void Mapping::_internal_set_memory_start(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  memory_start_ = value;
}
inline void Mapping::set_memory_start(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_memory_start(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Mapping.memory_start)
}

// uint64 memory_limit = 2;
inline void Mapping::clear_memory_limit() {
  memory_limit_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Mapping::_internal_memory_limit() const {
  return memory_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Mapping::memory_limit() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Mapping.memory_limit)
  return _internal_memory_limit();
}
inline void Mapping::_internal_set_memory_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  memory_limit_ = value;
}
inline void Mapping::set_memory_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_memory_limit(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Mapping.memory_limit)
}

// uint64 file_offset = 3;
inline void Mapping::clear_file_offset() {
  file_offset_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Mapping::_internal_file_offset() const {
  return file_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Mapping::file_offset() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Mapping.file_offset)
  return _internal_file_offset();
}
inline void Mapping::_internal_set_file_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  file_offset_ = value;
}
inline void Mapping::set_file_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_file_offset(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Mapping.file_offset)
}

// int32 filename_strindex = 4;
inline void Mapping::clear_filename_strindex() {
  filename_strindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Mapping::_internal_filename_strindex() const {
  return filename_strindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Mapping::filename_strindex() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Mapping.filename_strindex)
  return _internal_filename_strindex();
}
inline void Mapping::_internal_set_filename_strindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  filename_strindex_ = value;
}
inline void Mapping::set_filename_strindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_filename_strindex(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Mapping.filename_strindex)
}

// repeated int32 attribute_indices = 5;
inline int Mapping::_internal_attribute_indices_size() const {
  return attribute_indices_.size();
}
inline int Mapping::attribute_indices_size() const {
  return _internal_attribute_indices_size();
}
inline void Mapping::clear_attribute_indices() {
  attribute_indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Mapping::_internal_attribute_indices(int index) const {
  return attribute_indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Mapping::attribute_indices(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Mapping.attribute_indices)
  return _internal_attribute_indices(index);
}
inline void Mapping::set_attribute_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  attribute_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Mapping.attribute_indices)
}
inline void Mapping::_internal_add_attribute_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  attribute_indices_.Add(value);
}
inline void Mapping::add_attribute_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_attribute_indices(value);
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.Mapping.attribute_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Mapping::_internal_attribute_indices() const {
  return attribute_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Mapping::attribute_indices() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.Mapping.attribute_indices)
  return _internal_attribute_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Mapping::_internal_mutable_attribute_indices() {
  return &attribute_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Mapping::mutable_attribute_indices() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.Mapping.attribute_indices)
  return _internal_mutable_attribute_indices();
}

// bool has_functions = 6;
inline void Mapping::clear_has_functions() {
  has_functions_ = false;
}
inline bool Mapping::_internal_has_functions() const {
  return has_functions_;
}
inline bool Mapping::has_functions() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Mapping.has_functions)
  return _internal_has_functions();
}
inline void Mapping::_internal_set_has_functions(bool value) {
  
  has_functions_ = value;
}
inline void Mapping::set_has_functions(bool value) {
  _internal_set_has_functions(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Mapping.has_functions)
}

// bool has_filenames = 7;
inline void Mapping::clear_has_filenames() {
  has_filenames_ = false;
}
inline bool Mapping::_internal_has_filenames() const {
  return has_filenames_;
}
inline bool Mapping::has_filenames() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Mapping.has_filenames)
  return _internal_has_filenames();
}
inline void Mapping::_internal_set_has_filenames(bool value) {
  
  has_filenames_ = value;
}
inline void Mapping::set_has_filenames(bool value) {
  _internal_set_has_filenames(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Mapping.has_filenames)
}

// bool has_line_numbers = 8;
inline void Mapping::clear_has_line_numbers() {
  has_line_numbers_ = false;
}
inline bool Mapping::_internal_has_line_numbers() const {
  return has_line_numbers_;
}
inline bool Mapping::has_line_numbers() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Mapping.has_line_numbers)
  return _internal_has_line_numbers();
}
inline void Mapping::_internal_set_has_line_numbers(bool value) {
  
  has_line_numbers_ = value;
}
inline void Mapping::set_has_line_numbers(bool value) {
  _internal_set_has_line_numbers(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Mapping.has_line_numbers)
}

// bool has_inline_frames = 9;
inline void Mapping::clear_has_inline_frames() {
  has_inline_frames_ = false;
}
inline bool Mapping::_internal_has_inline_frames() const {
  return has_inline_frames_;
}
inline bool Mapping::has_inline_frames() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Mapping.has_inline_frames)
  return _internal_has_inline_frames();
}
inline void Mapping::_internal_set_has_inline_frames(bool value) {
  
  has_inline_frames_ = value;
}
inline void Mapping::set_has_inline_frames(bool value) {
  _internal_set_has_inline_frames(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Mapping.has_inline_frames)
}

// -------------------------------------------------------------------

// Location

// int32 mapping_index = 1;
inline bool Location::_internal_has_mapping_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Location::has_mapping_index() const {
  return _internal_has_mapping_index();
}
inline void Location::clear_mapping_index() {
  mapping_index_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Location::_internal_mapping_index() const {
  return mapping_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Location::mapping_index() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Location.mapping_index)
  return _internal_mapping_index();
}
inline void Location::_internal_set_mapping_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  mapping_index_ = value;
}
inline void Location::set_mapping_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mapping_index(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Location.mapping_index)
}

// uint64 address = 2;
inline void Location::clear_address() {
  address_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Location::_internal_address() const {
  return address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Location::address() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Location.address)
  return _internal_address();
}
inline void Location::_internal_set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  address_ = value;
}
inline void Location::set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Location.address)
}

// repeated .opentelemetry.proto.profiles.v1development.Line line = 3;
inline int Location::_internal_line_size() const {
  return line_.size();
}
inline int Location::line_size() const {
  return _internal_line_size();
}
inline void Location::clear_line() {
  line_.Clear();
}
inline ::opentelemetry::proto::profiles::v1development::Line* Location::mutable_line(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.Location.line)
  return line_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Line >*
Location::mutable_line() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.Location.line)
  return &line_;
}
inline const ::opentelemetry::proto::profiles::v1development::Line& Location::_internal_line(int index) const {
  return line_.Get(index);
}
inline const ::opentelemetry::proto::profiles::v1development::Line& Location::line(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Location.line)
  return _internal_line(index);
}
inline ::opentelemetry::proto::profiles::v1development::Line* Location::_internal_add_line() {
  return line_.Add();
}
inline ::opentelemetry::proto::profiles::v1development::Line* Location::add_line() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.Location.line)
  return _internal_add_line();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Line >&
Location::line() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.Location.line)
  return line_;
}

// bool is_folded = 4;
inline void Location::clear_is_folded() {
  is_folded_ = false;
}
inline bool Location::_internal_is_folded() const {
  return is_folded_;
}
inline bool Location::is_folded() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Location.is_folded)
  return _internal_is_folded();
}
inline void Location::_internal_set_is_folded(bool value) {
  
  is_folded_ = value;
}
inline void Location::set_is_folded(bool value) {
  _internal_set_is_folded(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Location.is_folded)
}

// repeated int32 attribute_indices = 5;
inline int Location::_internal_attribute_indices_size() const {
  return attribute_indices_.size();
}
inline int Location::attribute_indices_size() const {
  return _internal_attribute_indices_size();
}
inline void Location::clear_attribute_indices() {
  attribute_indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Location::_internal_attribute_indices(int index) const {
  return attribute_indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Location::attribute_indices(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Location.attribute_indices)
  return _internal_attribute_indices(index);
}
inline void Location::set_attribute_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  attribute_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Location.attribute_indices)
}
inline void Location::_internal_add_attribute_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  attribute_indices_.Add(value);
}
inline void Location::add_attribute_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_attribute_indices(value);
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.Location.attribute_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Location::_internal_attribute_indices() const {
  return attribute_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Location::attribute_indices() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.Location.attribute_indices)
  return _internal_attribute_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Location::_internal_mutable_attribute_indices() {
  return &attribute_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Location::mutable_attribute_indices() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.Location.attribute_indices)
  return _internal_mutable_attribute_indices();
}

// -------------------------------------------------------------------

// Line

// int32 function_index = 1;
inline void Line::clear_function_index() {
  function_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Line::_internal_function_index() const {
  return function_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Line::function_index() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Line.function_index)
  return _internal_function_index();
}
inline void Line::_internal_set_function_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  function_index_ = value;
}
inline void Line::set_function_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_function_index(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Line.function_index)
}

// int64 line = 2;
inline void Line::clear_line() {
  line_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Line::_internal_line() const {
  return line_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Line::line() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Line.line)
  return _internal_line();
}
inline void Line::_internal_set_line(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  line_ = value;
}
inline void Line::set_line(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_line(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Line.line)
}

// int64 column = 3;
inline void Line::clear_column() {
  column_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Line::_internal_column() const {
  return column_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Line::column() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Line.column)
  return _internal_column();
}
inline void Line::_internal_set_column(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  column_ = value;
}
inline void Line::set_column(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_column(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Line.column)
}

// -------------------------------------------------------------------

// Function

// int32 name_strindex = 1;
inline void Function::clear_name_strindex() {
  name_strindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Function::_internal_name_strindex() const {
  return name_strindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Function::name_strindex() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Function.name_strindex)
  return _internal_name_strindex();
}
inline void Function::_internal_set_name_strindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  name_strindex_ = value;
}
inline void Function::set_name_strindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_name_strindex(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Function.name_strindex)
}

// int32 system_name_strindex = 2;
inline void Function::clear_system_name_strindex() {
  system_name_strindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Function::_internal_system_name_strindex() const {
  return system_name_strindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Function::system_name_strindex() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Function.system_name_strindex)
  return _internal_system_name_strindex();
}
inline void Function::_internal_set_system_name_strindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  system_name_strindex_ = value;
}
inline void Function::set_system_name_strindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_system_name_strindex(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Function.system_name_strindex)
}

// int32 filename_strindex = 3;
inline void Function::clear_filename_strindex() {
  filename_strindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Function::_internal_filename_strindex() const {
  return filename_strindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Function::filename_strindex() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Function.filename_strindex)
  return _internal_filename_strindex();
}
inline void Function::_internal_set_filename_strindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  filename_strindex_ = value;
}
inline void Function::set_filename_strindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_filename_strindex(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Function.filename_strindex)
}

// int64 start_line = 4;
inline void Function::clear_start_line() {
  start_line_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Function::_internal_start_line() const {
  return start_line_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Function::start_line() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Function.start_line)
  return _internal_start_line();
}
inline void Function::_internal_set_start_line(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  start_line_ = value;
}
inline void Function::set_start_line(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_start_line(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Function.start_line)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1development
}  // namespace profiles
}  // namespace proto
}  // namespace opentelemetry

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::opentelemetry::proto::profiles::v1development::AggregationTemporality> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opentelemetry::proto::profiles::v1development::AggregationTemporality>() {
  return ::opentelemetry::proto::profiles::v1development::AggregationTemporality_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto
